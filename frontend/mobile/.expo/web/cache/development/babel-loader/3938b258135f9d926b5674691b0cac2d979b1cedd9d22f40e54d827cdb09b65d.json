{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport React, { useContext } from 'react';\nimport { useStripe } from '@stripe/stripe-react-native';\nimport { paymentSheet } from \"../utils/stripeApi\";\nimport { updateUserProfile, loginUser } from \"../utils/api\";\nimport { createTransaction } from \"../utils/transactionApi\";\nimport { AuthContext } from \"../AuthContext\";\nexport var initializePaymentSheet = function () {\n  var _ref = _asyncToGenerator(function* (stripeCustomerId, user, description, amount, setStripeCustomerId, setEphemeralKey, setPaymentIntent, setPublishableKey, setCustIdExists, initPaymentSheet, setLoading, taxable) {\n    try {\n      console.log(\"stripeCustomerId: \", stripeCustomerId);\n      if (stripeCustomerId !== null) {\n        setCustIdExists(true);\n      }\n      var currency = 'sgd';\n      var _yield$paymentSheet = yield paymentSheet({\n          stripeCustomerId: stripeCustomerId,\n          amount: amount * 100,\n          currency: currency,\n          email: user.email,\n          name: user.name,\n          description: description,\n          taxable: taxable\n        }),\n        data = _yield$paymentSheet.data,\n        success = _yield$paymentSheet.success,\n        message = _yield$paymentSheet.message;\n      console.log(\"Data:\", data, \" success: \", success);\n      if (!success) {\n        console.error('Error fetching payment sheet data:', message);\n        return;\n      }\n      if (stripeCustomerId === null) {\n        setStripeCustomerId(data.customer);\n      }\n      setEphemeralKey(data.ephemeralKey);\n      setPaymentIntent(data.paymentIntent);\n      setPublishableKey(data.publishableKey);\n      console.log(\"Data at StripeServices:\", data, \" success: \", success);\n      var _yield$initPaymentShe = yield initPaymentSheet({\n          merchantDisplayName: 'PropertyGo, Pte. Ltd.',\n          customerId: data.customer,\n          customerEphemeralKeySecret: data.ephemeralKey,\n          paymentIntentClientSecret: data.paymentIntent,\n          allowsDelayedPaymentMethods: true,\n          defaultBillingDetails: {\n            name: user.name\n          }\n        }),\n        error = _yield$initPaymentShe.error;\n      if (!error) {\n        setLoading(true);\n      } else {\n        console.error('Error initializing payment sheet:', error);\n        throw error;\n      }\n    } catch (error) {\n      console.error('Error setting up payment sheet:', error);\n    }\n  });\n  return function initializePaymentSheet(_x, _x2, _x3, _x4, _x5, _x6, _x7, _x8, _x9, _x10, _x11, _x12) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var updateUserStripeCustomerId = function () {\n  var _ref2 = _asyncToGenerator(function* (stripeCustomerId, user, login) {\n    var formData = new FormData();\n    console.log(\"stripeCustomerId: \", stripeCustomerId);\n    formData.append('stripeCustomerId', stripeCustomerId);\n    formData.append('email', user.email);\n    formData.append('countryOfOrigin', user.countryOfOrigin);\n    formData.append('dateOfBirth', user.dateOfBirth);\n    var _yield$updateUserProf = yield updateUserProfile(user.userId, formData),\n      success = _yield$updateUserProf.success,\n      data = _yield$updateUserProf.data,\n      message = _yield$updateUserProf.message;\n    fetchUpdatedUserDetails(user, login);\n  });\n  return function updateUserStripeCustomerId(_x13, _x14, _x15) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var createTransactionRecord = function () {\n  var _ref3 = _asyncToGenerator(function* (propertyListing, user, paymentIntent, status, transactionType, transactionItem, quantity, paymentAmount, gst) {\n    var _yield$createTransact = yield createTransaction({\n        onHoldBalance: propertyListing.optionFee,\n        transactionItem: transactionItem,\n        paymentAmount: paymentAmount,\n        quantity: quantity,\n        gst: gst,\n        buyerId: user.userId,\n        propertyId: propertyListing.propertyListingId,\n        stripePaymentResponse: paymentIntent,\n        status: status,\n        transactionType: transactionType\n      }),\n      data = _yield$createTransact.data,\n      success = _yield$createTransact.success,\n      message = _yield$createTransact.message;\n    console.log(\"createTransactionRecord - success: \", success, \" data: \", data, \" message: \", message);\n  });\n  return function createTransactionRecord(_x16, _x17, _x18, _x19, _x20, _x21, _x22, _x23, _x24) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var createTokenTransactionRecord = function () {\n  var _ref4 = _asyncToGenerator(function* (user, paymentIntent, status, transactionType, tokenName, tokens, tokenAmount, gst) {\n    var _yield$createTransact2 = yield createTransaction({\n        buyerId: user.userId,\n        transactionItem: tokenName,\n        paymentAmount: tokenAmount,\n        quantity: tokens,\n        gst: gst,\n        stripePaymentResponse: paymentIntent,\n        status: status,\n        transactionType: transactionType\n      }),\n      data = _yield$createTransact2.data,\n      success = _yield$createTransact2.success,\n      message = _yield$createTransact2.message;\n  });\n  return function createTokenTransactionRecord(_x25, _x26, _x27, _x28, _x29, _x30, _x31, _x32) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var fetchUpdatedUserDetails = function () {\n  var _ref5 = _asyncToGenerator(function* (user, login) {\n    console.log(\"fetchUpdatedUserDetails user: \", user);\n    try {\n      var _yield$loginUser = yield loginUser(user.userName, user.password),\n        success = _yield$loginUser.success,\n        data = _yield$loginUser.data,\n        message = _yield$loginUser.message;\n      if (success) {\n        console.log(\"success!: \");\n        login(data);\n      } else {\n        Alert.alert('Error', message);\n      }\n    } catch (error) {\n      console.error('Error fetching updated user details:', error);\n    }\n  });\n  return function fetchUpdatedUserDetails(_x33, _x34) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexport var handleDeepLink = function () {\n  var _ref6 = _asyncToGenerator(function* (url, handleURLCallback) {\n    if (url) {\n      var stripeHandled = yield handleURLCallback(url);\n      if (stripeHandled) {} else {}\n    }\n  });\n  return function handleDeepLink(_x35, _x36) {\n    return _ref6.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["React","useContext","useStripe","paymentSheet","updateUserProfile","loginUser","createTransaction","AuthContext","initializePaymentSheet","_ref","_asyncToGenerator","stripeCustomerId","user","description","amount","setStripeCustomerId","setEphemeralKey","setPaymentIntent","setPublishableKey","setCustIdExists","initPaymentSheet","setLoading","taxable","console","log","currency","_yield$paymentSheet","email","name","data","success","message","error","customer","ephemeralKey","paymentIntent","publishableKey","_yield$initPaymentShe","merchantDisplayName","customerId","customerEphemeralKeySecret","paymentIntentClientSecret","allowsDelayedPaymentMethods","defaultBillingDetails","_x","_x2","_x3","_x4","_x5","_x6","_x7","_x8","_x9","_x10","_x11","_x12","apply","arguments","updateUserStripeCustomerId","_ref2","login","formData","FormData","append","countryOfOrigin","dateOfBirth","_yield$updateUserProf","userId","fetchUpdatedUserDetails","_x13","_x14","_x15","createTransactionRecord","_ref3","propertyListing","status","transactionType","transactionItem","quantity","paymentAmount","gst","_yield$createTransact","onHoldBalance","optionFee","buyerId","propertyId","propertyListingId","stripePaymentResponse","_x16","_x17","_x18","_x19","_x20","_x21","_x22","_x23","_x24","createTokenTransactionRecord","_ref4","tokenName","tokens","tokenAmount","_yield$createTransact2","_x25","_x26","_x27","_x28","_x29","_x30","_x31","_x32","_ref5","_yield$loginUser","userName","password","Alert","alert","_x33","_x34","handleDeepLink","_ref6","url","handleURLCallback","stripeHandled","_x35","_x36"],"sources":["/Users/kathleen/Documents/IS4103Capstone/PropertyGo/frontend/mobile/services/StripeServices.js"],"sourcesContent":["// StripeServices.js\nimport React, { useContext } from 'react';\nimport { useStripe } from '@stripe/stripe-react-native';\nimport { paymentSheet } from \"../utils/stripeApi\";\nimport { updateUserProfile, loginUser } from \"../utils/api\";\nimport { createTransaction } from \"../utils/transactionApi\";\nimport { AuthContext } from '../AuthContext';\n\nexport const initializePaymentSheet = async (\n    stripeCustomerId,\n    user,\n    description,\n    amount,\n    setStripeCustomerId,\n    setEphemeralKey,\n    setPaymentIntent,\n    setPublishableKey,\n    setCustIdExists,\n    initPaymentSheet, // Pass initPaymentSheet as a parameter\n    setLoading,\n    taxable,\n) => {\n    try {\n        // Use the paymentSheet function to fetch payment parameters\n        console.log(\"stripeCustomerId: \", stripeCustomerId);\n        if (stripeCustomerId !== null) {\n            setCustIdExists(true);\n        }\n\n        const currency = 'sgd'; // Replace with the desired currency code\n\n        const { data, success, message } = await paymentSheet({\n            stripeCustomerId,\n            amount: amount * 100,\n            currency,\n            email: user.email,\n            name: user.name,\n            description,\n            taxable,\n        });\n\n        console.log(\"Data:\", data, \" success: \", success);\n\n        if (!success) {\n            console.error('Error fetching payment sheet data:', message);\n            // Handle the error as needed (e.g., show an error message to the user)\n            return;\n        }\n\n        if (stripeCustomerId === null) {\n            setStripeCustomerId(data.customer);\n        }\n        setEphemeralKey(data.ephemeralKey);\n        setPaymentIntent(data.paymentIntent);\n        setPublishableKey(data.publishableKey);\n\n        console.log(\"Data at StripeServices:\", data, \" success: \", success);\n        const { error } = await initPaymentSheet({\n            merchantDisplayName: 'PropertyGo, Pte. Ltd.',\n            customerId: data.customer,\n            customerEphemeralKeySecret: data.ephemeralKey,\n            paymentIntentClientSecret: data.paymentIntent,\n            allowsDelayedPaymentMethods: true,\n            defaultBillingDetails: {\n                name: user.name,\n            },\n        });\n\n        if (!error) {\n            setLoading(true);\n        } else {\n            console.error('Error initializing payment sheet:', error);\n            throw error;\n        }\n    } catch (error) {\n        console.error('Error setting up payment sheet:', error);\n    }\n};\n\n\nexport const updateUserStripeCustomerId = async (stripeCustomerId, user, login) => {\n    const formData = new FormData();\n    console.log(\"stripeCustomerId: \", stripeCustomerId);\n    formData.append('stripeCustomerId', stripeCustomerId);\n    formData.append('email', user.email);\n    formData.append('countryOfOrigin', user.countryOfOrigin);\n    formData.append('dateOfBirth', user.dateOfBirth);\n\n    const { success, data, message } = await updateUserProfile(user.userId, formData);\n    // console.log(\"updateUserStripeCustomerId success: \", success, \" data: \", data, \" message: \", message);\n    fetchUpdatedUserDetails(user, login);\n};\n\nexport const createTransactionRecord = async (propertyListing, user, paymentIntent, status, transactionType, transactionItem, quantity, paymentAmount, gst) => {\n    const { data, success, message } = await createTransaction({\n        onHoldBalance: propertyListing.optionFee,\n        transactionItem: transactionItem,\n        paymentAmount,\n        quantity,\n        gst,\n        buyerId: user.userId,\n        propertyId: propertyListing.propertyListingId,\n        stripePaymentResponse: paymentIntent,\n        status,\n        transactionType,\n    });\n  console.log(\"createTransactionRecord - success: \", success, \" data: \", data, \" message: \", message);\n};\n\nexport const createTokenTransactionRecord = async (user, paymentIntent, status, transactionType, tokenName, tokens, tokenAmount, gst) => {\n    const { data, success, message } = await createTransaction({\n        buyerId: user.userId,\n        transactionItem: tokenName,\n        paymentAmount: tokenAmount,\n        quantity: tokens,\n        gst,\n        stripePaymentResponse: paymentIntent,\n        status,\n        transactionType,\n    });\n    //  console.log(\"createTransactionRecord - success: \", success, \" data: \", data, \" message: \", message);\n};\n\nexport const fetchUpdatedUserDetails = async (user, login) => {\n    console.log(\"fetchUpdatedUserDetails user: \", user);\n    try {\n        const { success, data, message } = await loginUser(user.userName, user.password);\n\n        if (success) {\n            console.log(\"success!: \");\n            login(data);\n        } else {\n            Alert.alert('Error', message);\n        }\n    } catch (error) {\n        console.error('Error fetching updated user details:', error);\n    }\n};\n\nexport const handleDeepLink = async (url, handleURLCallback) => {\n    if (url) {\n        const stripeHandled = await handleURLCallback(url);\n        if (stripeHandled) {\n            // This was a Stripe URL - you can return or add extra handling here as you see fit\n        } else {\n            // This was NOT a Stripe URL – handle as you normally would\n        }\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}