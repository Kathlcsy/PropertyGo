{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { Calendar } from 'react-native-calendars';\nimport { Ionicons, MaterialCommunityIcons } from '@expo/vector-icons';\nimport { useNavigation } from '@react-navigation/native';\nimport DateTimePickerModal from 'react-native-modal-datetime-picker';\nimport ScheduleCard from \"./ScheduleCard\";\nimport { createViewingAvailability, getViewingAvailabilityByDateAndPropertyId, getViewingAvailabilityByPropertyId, removeViewingAvailability, updateViewingAvailability, getScheduleByPropertyId } from \"../../utils/scheduleApi\";\nimport AppointmentCard from \"./AppointmentCard\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar SetSchedule = function SetSchedule(_ref) {\n  var route = _ref.route;\n  var propertyListingId = route.params.propertyListingId;\n  var navigation = useNavigation();\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedTime = _useState2[0],\n    setSelectedTime = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    startTimePickerVisible = _useState4[0],\n    setStartTimePickerVisible = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    endTimePickerVisible = _useState6[0],\n    setEndTimePickerVisible = _useState6[1];\n  var _useState7 = useState(null),\n    _useState8 = _slicedToArray(_useState7, 2),\n    startTimePickerDisplay = _useState8[0],\n    setStartTimePickerDisplay = _useState8[1];\n  var _useState9 = useState(null),\n    _useState10 = _slicedToArray(_useState9, 2),\n    endTimePickerDisplay = _useState10[0],\n    setEndTimePickerDisplay = _useState10[1];\n  var _useState11 = useState(null),\n    _useState12 = _slicedToArray(_useState11, 2),\n    startTime = _useState12[0],\n    setStartTime = _useState12[1];\n  var _useState13 = useState(null),\n    _useState14 = _slicedToArray(_useState13, 2),\n    endTime = _useState14[0],\n    setEndTime = _useState14[1];\n  var _useState15 = useState(new Date()),\n    _useState16 = _slicedToArray(_useState15, 2),\n    selectedDate = _useState16[0],\n    setSelectedDate = _useState16[1];\n  var _useState17 = useState([]),\n    _useState18 = _slicedToArray(_useState17, 2),\n    availability = _useState18[0],\n    setAvailability = _useState18[1];\n  var _useState19 = useState(false),\n    _useState20 = _slicedToArray(_useState19, 2),\n    isToBeUpdated = _useState20[0],\n    setIsToBeUpdated = _useState20[1];\n  var _useState21 = useState(null),\n    _useState22 = _slicedToArray(_useState21, 2),\n    viewingAvailabilityId = _useState22[0],\n    setViewingAvailabilityId = _useState22[1];\n  var _useState23 = useState([]),\n    _useState24 = _slicedToArray(_useState23, 2),\n    bookedSlots = _useState24[0],\n    setBookedSlots = _useState24[1];\n  useEffect(function () {\n    fetchViewingAvailabilityByDateAndPropertyId();\n    fetchViewingAvailabilityByPropertyId();\n    fetchScheduleByProperty();\n  }, [selectedDate, isToBeUpdated]);\n  var getTodayDate = function getTodayDate() {\n    var options = {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      timeZone: 'Asia/Singapore'\n    };\n    var today = new Date();\n    today.setHours(0, 0, 0, 0);\n    var todayString = today.toLocaleString('en-SG', options);\n    var parts = todayString.split('/');\n    var todayDate;\n    if (parts.length === 3) {\n      var dd = parts[0].padStart(2, '0');\n      var mm = parts[1].padStart(2, '0');\n      var yyyy = parts[2];\n      todayDate = `${yyyy}-${mm}-${dd}`;\n    }\n    return todayDate;\n  };\n  var fetchScheduleByProperty = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      var _yield$getScheduleByP = yield getScheduleByPropertyId(propertyListingId),\n        success = _yield$getScheduleByP.success,\n        data = _yield$getScheduleByP.data,\n        message = _yield$getScheduleByP.message;\n      if (success) {\n        var currentDate = new Date();\n        var filteredSchedules = data.filter(function (schedule) {\n          return currentDate <= new Date(schedule.meetupDate) && schedule.propertyId === propertyListingId;\n        });\n        setBookedSlots(filteredSchedules);\n      } else {\n        setBookedSlots([]);\n        console.error('Error fetching schedule data for user:', message);\n      }\n    });\n    return function fetchScheduleByProperty() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var sortedSchedules = _toConsumableArray(bookedSlots);\n  sortedSchedules.sort(function (a, b) {\n    var dateA = new Date(a.meetupDate);\n    var dateB = new Date(b.meetupDate);\n    if (dateA < dateB) return -1;\n    if (dateA > dateB) return 1;\n    var timeA = a.meetupTime;\n    var timeB = b.meetupTime;\n    if (timeA < timeB) return -1;\n    if (timeA > timeB) return 1;\n    return 0;\n  });\n  var fetchViewingAvailabilityByDateAndPropertyId = function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      console.log('selectedDate: ', selectedDate);\n      var _yield$getViewingAvai = yield getViewingAvailabilityByDateAndPropertyId(selectedDate, propertyListingId),\n        success = _yield$getViewingAvai.success,\n        data = _yield$getViewingAvai.data,\n        message = _yield$getViewingAvai.message;\n      if (success) {\n        setIsToBeUpdated(true);\n        setStartTimePickerDisplay(convertTimeTo12HourFormat(data[0].startTimeSlot));\n        setEndTimePickerDisplay(convertTimeTo12HourFormat(data[0].endTimeSlot));\n        setStartTime(convertToDateTime(data[0].startTimeSlot));\n        setEndTime(convertToDateTime(data[0].endTimeSlot));\n        setViewingAvailabilityId(data[0].viewingAvailabilityId);\n      } else {\n        console.error('Error:', message);\n        setIsToBeUpdated(false);\n        setStartTimePickerDisplay(null);\n        setEndTimePickerDisplay(null);\n      }\n    });\n    return function fetchViewingAvailabilityByDateAndPropertyId() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var convertToDateTime = function convertToDateTime(timeString) {\n    var _timeString$split = timeString.split(':'),\n      _timeString$split2 = _slicedToArray(_timeString$split, 3),\n      hours = _timeString$split2[0],\n      minutes = _timeString$split2[1],\n      seconds = _timeString$split2[2];\n    var formattedDate = new Date();\n    formattedDate.setHours(parseInt(hours, 10));\n    formattedDate.setMinutes(parseInt(minutes, 10));\n    formattedDate.setSeconds(parseInt(seconds, 10));\n    console.log(\"convertToDateTime: \", formattedDate);\n    return formattedDate;\n  };\n  var fetchViewingAvailabilityByPropertyId = function () {\n    var _ref4 = _asyncToGenerator(function* () {\n      var _yield$getViewingAvai2 = yield getViewingAvailabilityByPropertyId(propertyListingId),\n        success = _yield$getViewingAvai2.success,\n        data = _yield$getViewingAvai2.data,\n        message = _yield$getViewingAvai2.message;\n      if (success) {\n        console.log('data: ', data);\n        setAvailability(data);\n      } else {\n        console.error('Error fetchViewingAvailabilityByPropertyId:', message);\n        setAvailability([]);\n      }\n    });\n    return function fetchViewingAvailabilityByPropertyId() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  var handleTimeSlotSelect = function handleTimeSlotSelect(time) {\n    if (!startTime) {\n      setStartTimePickerVisible(true);\n    } else if (!endTime) {\n      setEndTimePickerVisible(true);\n    }\n  };\n  function convertTimeTo12HourFormat(time) {\n    var _time$split = time.split(\":\"),\n      _time$split2 = _slicedToArray(_time$split, 3),\n      hours = _time$split2[0],\n      minutes = _time$split2[1],\n      seconds = _time$split2[2];\n    var period = \"AM\";\n    var formattedHours = parseInt(hours);\n    if (formattedHours >= 12) {\n      period = \"PM\";\n      if (formattedHours > 12) {\n        formattedHours -= 12;\n      }\n    }\n    return `${formattedHours}:${minutes} ${period}`;\n  }\n  var handleStartTimeConfirm = function handleStartTimeConfirm(time) {\n    var minutes = time.getMinutes();\n    var roundedMinutes = Math.round(minutes / 30) * 30;\n    time.setMinutes(roundedMinutes);\n    var selectedStartTime = new Date(time);\n    var selectedEndTime = endTimePickerDisplay ? new Date(endTimePickerDisplay) : null;\n    console.log(\"selectedEndTime\", endTime);\n    console.log(\"selectedStartTime\", selectedStartTime);\n    if (endTime && selectedStartTime >= endTime) {\n      Alert.alert('Invalid Time', 'Start time cannot be later than or equal to end time.');\n    } else {\n      var formattedTime = selectedStartTime.toLocaleTimeString([], {\n        hour: 'numeric',\n        minute: '2-digit'\n      });\n      setStartTime(selectedStartTime);\n      setStartTimePickerDisplay(formattedTime);\n      setStartTimePickerVisible(false);\n    }\n  };\n  var handleEndTimeConfirm = function handleEndTimeConfirm(time) {\n    var minutes = time.getMinutes();\n    var roundedMinutes = Math.round(minutes / 30) * 30;\n    time.setMinutes(roundedMinutes);\n    var selectedEndTime = new Date(time);\n    var selectedStartTime = startTimePickerDisplay ? new Date(startTimePickerDisplay) : null;\n    console.log(\"selectedEndTime\", selectedEndTime);\n    console.log(\"selectedStartTime\", startTime);\n    if (startTime && selectedEndTime <= startTime) {\n      Alert.alert('Invalid Time', 'End time cannot be earlier than or equal to start time.');\n    } else {\n      var formattedTime = selectedEndTime.toLocaleTimeString([], {\n        hour: 'numeric',\n        minute: '2-digit'\n      });\n      setEndTime(selectedEndTime);\n      setEndTimePickerDisplay(formattedTime);\n      setEndTimePickerVisible(false);\n    }\n  };\n  var handleDayPress = function handleDayPress(day) {\n    setSelectedDate(day.dateString);\n    setSelectedTime(null);\n    setStartTime(null);\n    setEndTime(null);\n  };\n  var formatDate = function formatDate(dateString) {\n    var options = {\n      day: '2-digit',\n      month: 'long',\n      year: 'numeric'\n    };\n    return new Date(dateString).toLocaleDateString(undefined, options);\n  };\n  var handleSubmit = function () {\n    var _ref5 = _asyncToGenerator(function* () {\n      if (!selectedDate || !startTimePickerDisplay || !endTimePickerDisplay) {\n        Alert.alert('Incomplete Information', 'Please select a date, start time, and end time.');\n        return;\n      }\n      console.log(\"selectedDate --\", selectedDate);\n      var availabilityData = {\n        propertyListingId: propertyListingId,\n        date: selectedDate,\n        startTimeSlot: startTime.toLocaleTimeString('en-US', {\n          hour: '2-digit',\n          minute: '2-digit',\n          hour12: false\n        }),\n        endTimeSlot: endTime.toLocaleTimeString('en-US', {\n          hour: '2-digit',\n          minute: '2-digit',\n          hour12: false\n        })\n      };\n      if (isToBeUpdated == false) {\n        var response = yield createViewingAvailability(availabilityData);\n        if (response.success) {\n          Alert.alert('Success', 'Availability added successfully.');\n          setSelectedTime(null);\n          setStartTime(null);\n          setEndTime(null);\n          setSelectedDate(new Date());\n        } else {\n          Alert.alert('Error', 'Failed to add availability. Please try again later.');\n        }\n      } else {\n        var _response = yield updateViewingAvailability(availabilityData, viewingAvailabilityId);\n        if (_response.success) {\n          Alert.alert('Success', 'Availability successfully updated.');\n          setSelectedTime(null);\n          setStartTime(null);\n          setEndTime(null);\n          setSelectedDate(new Date());\n        } else {\n          Alert.alert('Error', 'Failed to add availability. Please try again later.');\n          console.log(\"Error: \", _response.message);\n        }\n        console.log(\"Not to be updated\");\n      }\n      fetchViewingAvailabilityByPropertyId();\n      fetchScheduleByProperty();\n    });\n    return function handleSubmit() {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n  var handleRemove = function () {\n    var _ref6 = _asyncToGenerator(function* () {\n      var response = yield removeViewingAvailability(viewingAvailabilityId);\n      console.log(\"response on removeViewingAvailability\", response);\n      if (response.success) {\n        Alert.alert('Success', 'Availability successfully removed.');\n        setSelectedTime(null);\n        setStartTime(null);\n        setEndTime(null);\n        setSelectedDate(new Date());\n      } else {\n        Alert.alert('Error', 'Failed to remove availability. Please try again later.');\n        console.log(\"Error: \", response.message);\n      }\n      fetchViewingAvailabilityByPropertyId();\n      fetchScheduleByProperty();\n    });\n    return function handleRemove() {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n  var getMarkedDates = function getMarkedDates() {\n    var markedDates = {};\n    var seller = {\n      key: 'seller',\n      color: 'red'\n    };\n    if (availability.length == 0) {\n      markedDates[selectedDate] = {\n        selected: true,\n        selectedColor: 'blue'\n      };\n    }\n    availability.forEach(function (availability) {\n      var date = availability.date;\n      markedDates[date] = {\n        dots: []\n      };\n      markedDates[date] = {\n        selected: true,\n        selectedColor: 'green'\n      };\n      markedDates[selectedDate] = {\n        selected: true,\n        selectedColor: 'blue'\n      };\n    });\n    bookedSlots.forEach(function (userSlot) {\n      var date = userSlot.meetupDate;\n      if (!markedDates[date]) {\n        markedDates[date] = {\n          dots: []\n        };\n      } else if (!markedDates[date].dots) {\n        markedDates[date].dots = [];\n      }\n      markedDates[date].dots.push(seller);\n      if (date === selectedDate) {\n        markedDates[date].selected = true;\n        markedDates[date].selectedDotColor = 'blue';\n      }\n    });\n    return markedDates;\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsxs(ScrollView, {\n      style: styles.scrollView,\n      contentContainerStyle: styles.scrollViewContent,\n      keyboardShouldPersistTaps: \"handled\",\n      children: [_jsxs(View, {\n        style: styles.headerContainer,\n        children: [_jsx(TouchableOpacity, {\n          style: styles.backButton,\n          onPress: function onPress() {\n            return navigation.goBack();\n          },\n          children: _jsx(Ionicons, {\n            name: \"arrow-back\",\n            size: 24,\n            color: \"black\"\n          })\n        }), _jsx(Text, {\n          style: styles.header,\n          children: \"Set Schedule Availability\"\n        })]\n      }), _jsx(View, {\n        style: styles.calendarContainer,\n        children: _jsx(Calendar, {\n          onDayPress: handleDayPress,\n          onMonthChange: handleDayPress,\n          markingType: 'multi-dot',\n          minDate: new Date(),\n          style: {\n            borderWidth: 0.5,\n            borderColor: 'gray',\n            height: 360\n          },\n          theme: {\n            backgroundColor: '#ffffff',\n            calendarBackground: '#ffffff',\n            textSectionTitleColor: '#b6c1cd',\n            selectedDayBackgroundColor: '#00adf5',\n            selectedDayTextColor: '#ffffff',\n            todayTextColor: '#00adf5',\n            dayTextColor: '#2d4150',\n            textDisabledColor: '#d9e1e8'\n          },\n          markedDates: getMarkedDates()\n        })\n      }), _jsxs(View, {\n        style: styles.timeSlotsContainer,\n        children: [_jsxs(Text, {\n          style: styles.dateOnContainer,\n          children: [_jsx(Ionicons, {\n            name: \"calendar\",\n            size: 28,\n            color: \"#00adf5\"\n          }), \" \", formatDate(selectedDate)]\n        }), _jsxs(View, {\n          style: styles.timePickers,\n          children: [_jsx(TouchableOpacity, {\n            style: styles.timePicker,\n            onPress: function onPress() {\n              return setStartTimePickerVisible(true);\n            },\n            children: _jsxs(Text, {\n              style: styles.timePickerText,\n              children: [\"Start Time: \", startTimePickerDisplay || 'Select']\n            })\n          }), _jsx(TouchableOpacity, {\n            style: styles.timePicker,\n            onPress: function onPress() {\n              return setEndTimePickerVisible(true);\n            },\n            children: _jsxs(Text, {\n              style: styles.timePickerText,\n              children: [\"End Time: \", endTimePickerDisplay || 'Select']\n            })\n          })]\n        }), _jsx(DateTimePickerModal, {\n          isVisible: startTimePickerVisible,\n          mode: \"time\",\n          minuteInterval: 30,\n          onConfirm: handleStartTimeConfirm,\n          onCancel: function onCancel() {\n            return setStartTimePickerVisible(false);\n          },\n          is24Hour: false\n        }), _jsx(DateTimePickerModal, {\n          isVisible: endTimePickerVisible,\n          mode: \"time\",\n          onConfirm: handleEndTimeConfirm,\n          onCancel: function onCancel() {\n            return setEndTimePickerVisible(false);\n          },\n          minuteInterval: 30,\n          is24Hour: false,\n          display: \"spinner\"\n        })]\n      }), _jsxs(View, {\n        style: styles.bookingContainer,\n        children: [_jsxs(Text, {\n          style: styles.dateOnContainer,\n          children: [_jsx(MaterialCommunityIcons, {\n            name: \"table-eye\",\n            size: 28,\n            color: \"#00adf5\"\n          }), ' ', \"Upcoming Buyers\"]\n        }), bookedSlots && bookedSlots.length > 0 ? _jsx(_Fragment, {\n          children: sortedSchedules.map(function (item) {\n            return _jsx(AppointmentCard, {\n              schedule: item,\n              propertyId: item.propertyId,\n              onPress: function onPress() {\n                navigation.navigate('View Appointment Detail', {\n                  userId: item.userId,\n                  propertyId: item.propertyId,\n                  scheduleId: item.scheduleId\n                });\n              }\n            });\n          })\n        }) : _jsx(Text, {\n          style: styles.noAvailabilityText,\n          children: \"There are no bookings for any viewings. \"\n        })]\n      })]\n    }), _jsxs(View, {\n      style: styles.buttonContainer,\n      children: [_jsx(TouchableOpacity, {\n        style: styles.removeButton,\n        onPress: handleRemove,\n        children: _jsx(Ionicons, {\n          name: \"trash-outline\",\n          size: 18,\n          color: \"white\"\n        })\n      }), _jsxs(TouchableOpacity, {\n        style: styles.saveChangesButton,\n        onPress: handleSubmit,\n        children: [_jsx(Ionicons, {\n          name: \"save-outline\",\n          size: 18,\n          color: \"white\"\n        }), _jsx(Text, {\n          style: styles.saveChangesButtonText,\n          children: \"Save\"\n        })]\n      })]\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'white',\n    padding: 16\n  },\n  calendarContainer: {\n    flex: 1,\n    borderRadius: 8,\n    padding: 0,\n    marginBottom: 10\n  },\n  timeSlotsContainer: {\n    flex: 1,\n    backgroundColor: 'white',\n    borderRadius: 8,\n    padding: 16,\n    borderWidth: 0.2,\n    borderColor: 'gray'\n  },\n  timePicker: {\n    flex: 1,\n    borderWidth: 1,\n    borderColor: 'gray',\n    borderRadius: 4,\n    padding: 10,\n    margin: 5,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  timePickerText: {\n    fontSize: 13\n  },\n  dateOnContainer: {\n    fontSize: 25,\n    fontWeight: 'bold',\n    marginBottom: 10,\n    marginLeft: 5\n  },\n  headerContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 20\n  },\n  header: {\n    fontSize: 22,\n    fontWeight: 'bold',\n    marginLeft: 0,\n    marginTop: 0\n  },\n  saveChangesButton: {\n    backgroundColor: 'green',\n    padding: 10,\n    borderRadius: 5,\n    marginTop: 10,\n    alignItems: 'center',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    width: '60%',\n    marginRight: 40,\n    marginLeft: 0\n  },\n  saveChangesButtonText: {\n    color: 'white',\n    marginLeft: 10\n  },\n  timePickers: {\n    flexDirection: 'row',\n    justifyContent: 'space-between'\n  },\n  backButton: {\n    padding: 10,\n    marginRight: 20\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginTop: 10\n  },\n  removeButton: {\n    backgroundColor: 'red',\n    padding: 10,\n    borderRadius: 5,\n    marginTop: 10,\n    flexDirection: 'row',\n    justifyContent: 'center',\n    width: 50,\n    marginLeft: 50\n  },\n  removeButtonText: {\n    color: 'white',\n    marginLeft: 10\n  },\n  bookingContainer: {\n    flex: 1,\n    marginTop: 10,\n    backgroundColor: 'white',\n    borderRadius: 8,\n    padding: 16,\n    borderWidth: 0.2,\n    borderColor: 'gray',\n    marginBottom: 10\n  },\n  bookingItem: {\n    marginTop: 10,\n    borderWidth: 1,\n    borderColor: 'lightgray',\n    borderRadius: 8,\n    padding: 16,\n    marginBottom: 10,\n    backgroundColor: 'white'\n  },\n  bookingItemText: {\n    fontSize: 16,\n    marginBottom: 8\n  },\n  bookingItemTextLabel: {\n    fontSize: 16,\n    marginBottom: 8,\n    fontWeight: 'bold'\n  },\n  noAvailabilityText: {\n    fontSize: 16,\n    textAlign: 'center',\n    marginTop: 10\n  }\n});\nexport default SetSchedule;","map":{"version":3,"names":["React","useState","useEffect","View","Text","StyleSheet","ScrollView","TouchableOpacity","Alert","FlatList","Calendar","Ionicons","MaterialCommunityIcons","useNavigation","DateTimePickerModal","ScheduleCard","createViewingAvailability","getViewingAvailabilityByDateAndPropertyId","getViewingAvailabilityByPropertyId","removeViewingAvailability","updateViewingAvailability","getScheduleByPropertyId","AppointmentCard","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","SetSchedule","_ref","route","propertyListingId","params","navigation","_useState","_useState2","_slicedToArray","selectedTime","setSelectedTime","_useState3","_useState4","startTimePickerVisible","setStartTimePickerVisible","_useState5","_useState6","endTimePickerVisible","setEndTimePickerVisible","_useState7","_useState8","startTimePickerDisplay","setStartTimePickerDisplay","_useState9","_useState10","endTimePickerDisplay","setEndTimePickerDisplay","_useState11","_useState12","startTime","setStartTime","_useState13","_useState14","endTime","setEndTime","_useState15","Date","_useState16","selectedDate","setSelectedDate","_useState17","_useState18","availability","setAvailability","_useState19","_useState20","isToBeUpdated","setIsToBeUpdated","_useState21","_useState22","viewingAvailabilityId","setViewingAvailabilityId","_useState23","_useState24","bookedSlots","setBookedSlots","fetchViewingAvailabilityByDateAndPropertyId","fetchViewingAvailabilityByPropertyId","fetchScheduleByProperty","getTodayDate","options","year","month","day","timeZone","today","setHours","todayString","toLocaleString","parts","split","todayDate","length","dd","padStart","mm","yyyy","_ref2","_asyncToGenerator","_yield$getScheduleByP","success","data","message","currentDate","filteredSchedules","filter","schedule","meetupDate","propertyId","console","error","apply","arguments","sortedSchedules","_toConsumableArray","sort","a","b","dateA","dateB","timeA","meetupTime","timeB","_ref3","log","_yield$getViewingAvai","convertTimeTo12HourFormat","startTimeSlot","endTimeSlot","convertToDateTime","timeString","_timeString$split","_timeString$split2","hours","minutes","seconds","formattedDate","parseInt","setMinutes","setSeconds","_ref4","_yield$getViewingAvai2","handleTimeSlotSelect","time","_time$split","_time$split2","period","formattedHours","handleStartTimeConfirm","getMinutes","roundedMinutes","Math","round","selectedStartTime","selectedEndTime","alert","formattedTime","toLocaleTimeString","hour","minute","handleEndTimeConfirm","handleDayPress","dateString","formatDate","toLocaleDateString","undefined","handleSubmit","_ref5","availabilityData","date","hour12","response","handleRemove","_ref6","getMarkedDates","markedDates","seller","key","color","selected","selectedColor","forEach","dots","userSlot","push","selectedDotColor","style","styles","container","children","scrollView","contentContainerStyle","scrollViewContent","keyboardShouldPersistTaps","headerContainer","backButton","onPress","goBack","name","size","header","calendarContainer","onDayPress","onMonthChange","markingType","minDate","borderWidth","borderColor","height","theme","backgroundColor","calendarBackground","textSectionTitleColor","selectedDayBackgroundColor","selectedDayTextColor","todayTextColor","dayTextColor","textDisabledColor","timeSlotsContainer","dateOnContainer","timePickers","timePicker","timePickerText","isVisible","mode","minuteInterval","onConfirm","onCancel","is24Hour","display","bookingContainer","map","item","navigate","userId","scheduleId","noAvailabilityText","buttonContainer","removeButton","saveChangesButton","saveChangesButtonText","create","flex","padding","borderRadius","marginBottom","margin","alignItems","justifyContent","fontSize","fontWeight","marginLeft","flexDirection","marginTop","width","marginRight","removeButtonText","bookingItem","bookingItemText","bookingItemTextLabel","textAlign"],"sources":["/Users/kathleen/Documents/IS4103Capstone/PropertyGo/frontend/mobile/screens/schedule/SetSchedule.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n    View,\n    Text,\n    StyleSheet,\n    ScrollView,\n    TouchableOpacity,\n    Alert,\n    FlatList,\n} from 'react-native';\nimport { Calendar } from 'react-native-calendars';\nimport { Ionicons, MaterialCommunityIcons } from '@expo/vector-icons';\nimport { useNavigation } from '@react-navigation/native';\nimport DateTimePickerModal from 'react-native-modal-datetime-picker';\nimport ScheduleCard from './ScheduleCard'; \nimport {\n    createViewingAvailability, getViewingAvailabilityByDateAndPropertyId,\n    getViewingAvailabilityByPropertyId, removeViewingAvailability, \n    updateViewingAvailability, getScheduleByPropertyId\n} from '../../utils/scheduleApi';\nimport AppointmentCard from './AppointmentCard';\n\nconst SetSchedule = ({ route }) => {\n    const { propertyListingId } = route.params;\n    const navigation = useNavigation();\n\n    const [selectedTime, setSelectedTime] = useState(null);\n    const [startTimePickerVisible, setStartTimePickerVisible] = useState(false);\n    const [endTimePickerVisible, setEndTimePickerVisible] = useState(false);\n    const [startTimePickerDisplay, setStartTimePickerDisplay] = useState(null);\n    const [endTimePickerDisplay, setEndTimePickerDisplay] = useState(null);\n    const [startTime, setStartTime] = useState(null);\n    const [endTime, setEndTime] = useState(null);\n    // Define selected date state\n    const [selectedDate, setSelectedDate] = useState(new Date());\n    const [availability, setAvailability] = useState([]);\n    const [isToBeUpdated, setIsToBeUpdated] = useState(false);\n    const [viewingAvailabilityId, setViewingAvailabilityId] = useState(null);\n    const [bookedSlots, setBookedSlots] = useState([]);\n\n    useEffect(() => {\n        fetchViewingAvailabilityByDateAndPropertyId();\n        fetchViewingAvailabilityByPropertyId();\n        fetchScheduleByProperty();\n\n    }, [selectedDate, isToBeUpdated]);\n\n    const getTodayDate = () => {\n        const options = {\n            year: 'numeric',\n            month: '2-digit',\n            day: '2-digit',\n            timeZone: 'Asia/Singapore', // Specify the time zone for Singapore\n        };\n        const today = new Date();\n        today.setHours(0, 0, 0, 0);\n        const todayString = today.toLocaleString('en-SG', options);\n        const parts = todayString.split('/');\n        let todayDate;\n        if (parts.length === 3) {\n            const dd = parts[0].padStart(2, '0');\n            const mm = parts[1].padStart(2, '0');\n            const yyyy = parts[2];\n            todayDate = `${yyyy}-${mm}-${dd}`;\n        }\n        return todayDate;\n    }\n\n    const fetchScheduleByProperty = async () => {\n        const { success, data, message } = await getScheduleByPropertyId(\n            propertyListingId\n        );\n\n        if (success) {\n            const currentDate = new Date();\n            const filteredSchedules = data.filter(schedule => currentDate <= new Date(schedule.meetupDate) && schedule.propertyId === propertyListingId);\n            setBookedSlots(filteredSchedules);\n        } else {\n            setBookedSlots([]);\n            console.error('Error fetching schedule data for user:', message);\n        }\n    };\n\n    const sortedSchedules = [...bookedSlots];\n    sortedSchedules.sort((a, b) => {\n        // Sort by meetup date first\n        const dateA = new Date(a.meetupDate);\n        const dateB = new Date(b.meetupDate);\n        if (dateA < dateB) return -1;\n        if (dateA > dateB) return 1;\n\n        // If meetup dates are the same, sort by time\n        const timeA = a.meetupTime;\n        const timeB = b.meetupTime;\n        if (timeA < timeB) return -1;\n        if (timeA > timeB) return 1;\n\n        return 0;\n    });\n\n\n    const fetchViewingAvailabilityByDateAndPropertyId = async () => {\n        console.log('selectedDate: ', selectedDate)\n        const { success, data, message } = await getViewingAvailabilityByDateAndPropertyId(\n            selectedDate,\n            propertyListingId\n        );\n\n        if (success) {\n            // console.log('data: ', data);\n\n            setIsToBeUpdated(true);\n            setStartTimePickerDisplay(convertTimeTo12HourFormat(data[0].startTimeSlot))\n            setEndTimePickerDisplay(convertTimeTo12HourFormat(data[0].endTimeSlot))\n            setStartTime(convertToDateTime(data[0].startTimeSlot))\n            setEndTime(convertToDateTime(data[0].endTimeSlot))\n            setViewingAvailabilityId(data[0].viewingAvailabilityId)\n        } else {\n            console.error('Error:', message);\n            setIsToBeUpdated(false);\n            setStartTimePickerDisplay(null);\n            setEndTimePickerDisplay(null);\n        }\n    }\n\n    const convertToDateTime = (timeString) => {\n\n        const [hours, minutes, seconds] = timeString.split(':');\n        const formattedDate = new Date();\n        formattedDate.setHours(parseInt(hours, 10));\n        formattedDate.setMinutes(parseInt(minutes, 10));\n        formattedDate.setSeconds(parseInt(seconds, 10));\n\n        console.log(\"convertToDateTime: \", formattedDate)\n        return formattedDate;\n    }\n\n    const fetchViewingAvailabilityByPropertyId = async () => {\n        // console.log('selectedDate: ', selectedDate)\n        const { success, data, message } = await getViewingAvailabilityByPropertyId(\n            propertyListingId\n        );\n\n        if (success) {\n            console.log('data: ', data);\n            setAvailability(data);\n        } else {\n            console.error('Error fetchViewingAvailabilityByPropertyId:', message);\n            setAvailability([]);\n        }\n    }\n\n    // Function to handle time slot selection\n    const handleTimeSlotSelect = (time) => {\n        if (!startTime) {\n            setStartTimePickerVisible(true);\n        } else if (!endTime) {\n            setEndTimePickerVisible(true);\n        }\n    };\n\n    function convertTimeTo12HourFormat(time) {\n        const [hours, minutes, seconds] = time.split(\":\");\n        let period = \"AM\";\n        let formattedHours = parseInt(hours);\n\n        if (formattedHours >= 12) {\n            period = \"PM\";\n            if (formattedHours > 12) {\n                formattedHours -= 12;\n            }\n        }\n\n        return `${formattedHours}:${minutes} ${period}`;\n    }\n\n    // Handle time picker confirm for start time\n    const handleStartTimeConfirm = (time) => {\n        const minutes = time.getMinutes();\n        const roundedMinutes = Math.round(minutes / 30) * 30; // Round to the nearest 30 minutes\n        time.setMinutes(roundedMinutes); // Update the minutes part of the time\n        const selectedStartTime = new Date(time); // Convert to Date object\n        const selectedEndTime = endTimePickerDisplay ? new Date(endTimePickerDisplay) : null;\n        console.log(\"selectedEndTime\", endTime)\n        console.log(\"selectedStartTime\", selectedStartTime)\n        // Check if the selected start time is later than the current end time\n        if (endTime && selectedStartTime >= endTime) {\n            Alert.alert('Invalid Time', 'Start time cannot be later than or equal to end time.');\n        } else {\n            const formattedTime = selectedStartTime.toLocaleTimeString([], { hour: 'numeric', minute: '2-digit' });\n            setStartTime(selectedStartTime);\n            setStartTimePickerDisplay(formattedTime);\n            setStartTimePickerVisible(false);\n        }\n    };\n\n    // Handle time picker confirm for end time\n    const handleEndTimeConfirm = (time) => {\n        const minutes = time.getMinutes();\n        const roundedMinutes = Math.round(minutes / 30) * 30; // Round to the nearest 30 minutes\n        time.setMinutes(roundedMinutes); // Update the minutes part of the time\n        const selectedEndTime = new Date(time); // Convert to Date object\n        const selectedStartTime = startTimePickerDisplay ? new Date(startTimePickerDisplay) : null;\n        console.log(\"selectedEndTime\", selectedEndTime)\n        console.log(\"selectedStartTime\", startTime)\n        // Check if the selected end time is earlier than the current start time\n        if (startTime && selectedEndTime <= startTime) {\n            Alert.alert('Invalid Time', 'End time cannot be earlier than or equal to start time.');\n        } else {\n            const formattedTime = selectedEndTime.toLocaleTimeString([], { hour: 'numeric', minute: '2-digit' });\n            setEndTime(selectedEndTime);\n            setEndTimePickerDisplay(formattedTime);\n            setEndTimePickerVisible(false);\n        }\n    };\n\n    // Function to handle day press in the calendar\n    const handleDayPress = (day) => {\n        setSelectedDate(day.dateString);\n        setSelectedTime(null); // Clear selected time when a new date is chosen\n        setStartTime(null);\n        setEndTime(null);\n    };\n\n    const formatDate = (dateString) => {\n        const options = { day: '2-digit', month: 'long', year: 'numeric' };\n        return new Date(dateString).toLocaleDateString(undefined, options);\n    };\n\n    const handleSubmit = async () => {\n        if (!selectedDate || !startTimePickerDisplay || !endTimePickerDisplay) {\n            // Check if all fields are filled\n            Alert.alert('Incomplete Information', 'Please select a date, start time, and end time.');\n            return;\n        }\n        console.log(\"selectedDate --\", selectedDate)\n        // Create the viewing availability object to be submitted\n        const availabilityData = {\n            propertyListingId: propertyListingId,\n            date: selectedDate,\n            // date: selectedDate.toISOString().slice(0, 10), // Extract and format date component as DATEONLY\n            startTimeSlot: startTime.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: false }),\n            endTimeSlot: endTime.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: false }), // Extract and format time component as TIME\n        };\n\n        // Call the API to create the viewing availability\n        // Replace createViewingAvailability with your actual API call\n\n        if (isToBeUpdated == false) {\n            const response = await createViewingAvailability(availabilityData);\n\n            // Placeholder response for testing\n            // const response = { success: true };\n\n            if (response.success) {\n                // Show a success alert\n                Alert.alert('Success', 'Availability added successfully.');\n\n                // Clear selected time and time range\n                setSelectedTime(null);\n                setStartTime(null);\n                setEndTime(null);\n\n                // Refresh the screen to reflect the new date\n                setSelectedDate(new Date());\n\n                // You can also navigate back to a different screen if needed\n                // navigation.navigate('SomeOtherScreen');\n            } else {\n                Alert.alert('Error', 'Failed to add availability. Please try again later.');\n            }\n        } else {\n            const response = await updateViewingAvailability(availabilityData, viewingAvailabilityId);\n            if (response.success) {\n                // Show a success alert\n                Alert.alert('Success', 'Availability successfully updated.');\n\n                // Clear selected time and time range\n                setSelectedTime(null);\n                setStartTime(null);\n                setEndTime(null);\n\n                // Refresh the screen to reflect the new date\n                setSelectedDate(new Date());\n\n                // You can also navigate back to a different screen if needed\n                // navigation.navigate('SomeOtherScreen');\n            } else {\n                Alert.alert('Error', 'Failed to add availability. Please try again later.');\n                console.log(\"Error: \", response.message)\n            }\n            console.log(\"Not to be updated\");\n        }\n\n        fetchViewingAvailabilityByPropertyId();\n        fetchScheduleByProperty();\n    };\n\n    const handleRemove = async () => {\n            const response = await removeViewingAvailability(viewingAvailabilityId);\n            console.log(\"response on removeViewingAvailability\", response)\n            if (response.success) {\n                // Show a success alert\n                Alert.alert('Success', 'Availability successfully removed.');\n\n                // Clear selected time and time range\n                setSelectedTime(null);\n                setStartTime(null);\n                setEndTime(null);\n\n                // Refresh the screen to reflect the new date\n                setSelectedDate(new Date());\n                // fetchViewingAvailabilityByPropertyId()\n            } else {\n                Alert.alert('Error', 'Failed to remove availability. Please try again later.');\n                console.log(\"Error: \", response.message)\n            }\n\n            fetchViewingAvailabilityByPropertyId();\n            fetchScheduleByProperty();\n    };\n\n    const getMarkedDates = () => {\n        const markedDates = {};\n        const seller = { key: 'seller', color: 'red' };\n\n        if(availability.length == 0){\n            markedDates[selectedDate] = { selected: true, selectedColor: 'blue' };\n        }\n\n        // Loop through the data and mark the dates\n        availability.forEach((availability) => {\n            const date = availability.date; // Get the date from the fetched data\n            markedDates[date] = { dots: [] };\n            // Specify how you want to mark the date\n\n            markedDates[date] = { selected: true, selectedColor: 'green' };\n            markedDates[selectedDate] = { selected: true, selectedColor: 'blue' };\n        });\n\n        bookedSlots.forEach((userSlot) => {\n            const date = userSlot.meetupDate;\n            if (!markedDates[date]) {\n                markedDates[date] = { dots: [] }; // Create a new entry with an empty dots array\n            } else if (!markedDates[date].dots) {\n                markedDates[date].dots = []; // If dots array doesn't exist, create it\n            }\n            markedDates[date].dots.push(seller);\n            \n            if (date === selectedDate) {\n                markedDates[date].selected = true;\n                markedDates[date].selectedDotColor = 'blue';\n            }\n        });\n\n        return markedDates;\n    };\n\n    return (\n        <View style={styles.container}>\n            <ScrollView\n                style={styles.scrollView}\n                contentContainerStyle={styles.scrollViewContent}\n                keyboardShouldPersistTaps=\"handled\"\n            >\n                <View style={styles.headerContainer}>\n                    <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>\n                        <Ionicons name=\"arrow-back\" size={24} color=\"black\" />\n                    </TouchableOpacity>\n                    <Text style={styles.header}>Set Schedule Availability</Text>\n                </View>\n                <View style={styles.calendarContainer}>\n                    <Calendar\n                        onDayPress={handleDayPress}\n                        onMonthChange={handleDayPress}\n                        markingType={'multi-dot'}\n                        minDate={new Date()}\n                        style={{\n                            borderWidth: 0.5,\n                            borderColor: 'gray',\n                            height: 360,\n                        }}\n                        theme={{\n                            backgroundColor: '#ffffff',\n                            calendarBackground: '#ffffff',\n                            textSectionTitleColor: '#b6c1cd',\n                            selectedDayBackgroundColor: '#00adf5',\n                            selectedDayTextColor: '#ffffff',\n                            todayTextColor: '#00adf5',\n                            dayTextColor: '#2d4150',\n                            textDisabledColor: '#d9e1e8',\n                        }}\n                        markedDates={getMarkedDates()}\n                    />\n                </View>\n\n                <View style={styles.timeSlotsContainer}>\n                <Text style={styles.dateOnContainer}>\n                        <Ionicons name=\"calendar\" size={28} color=\"#00adf5\" />\n                        {\" \"}{formatDate(selectedDate)}\n                    </Text>\n                    <View style={styles.timePickers}>\n                        <TouchableOpacity\n                            style={styles.timePicker}\n                            onPress={() => setStartTimePickerVisible(true)}\n                        >\n                            <Text style={styles.timePickerText}>\n                                Start Time: {startTimePickerDisplay || 'Select'}\n                            </Text>\n                        </TouchableOpacity>\n                        <TouchableOpacity\n                            style={styles.timePicker}\n                            onPress={() => setEndTimePickerVisible(true)}\n                        >\n                            <Text style={styles.timePickerText}>\n                                End Time: {endTimePickerDisplay || 'Select'}\n                            </Text>\n                        </TouchableOpacity>\n\n                    </View>\n\n                    <DateTimePickerModal\n                        isVisible={startTimePickerVisible}\n                        mode=\"time\"\n                        minuteInterval={30}\n                        onConfirm={handleStartTimeConfirm}\n                        onCancel={() => setStartTimePickerVisible(false)}\n                        is24Hour={false} // Use 12-hour format\n                    />\n\n                    <DateTimePickerModal\n                        isVisible={endTimePickerVisible}\n                        mode=\"time\"\n                        onConfirm={handleEndTimeConfirm}\n                        onCancel={() => setEndTimePickerVisible(false)}\n                        minuteInterval={30} // Set the minuteInterval to 60 for 1-hour intervals\n                        is24Hour={false} // Use 12-hour format\n                        display=\"spinner\"\n                    />\n                </View>\n                <View style={styles.bookingContainer}>\n                <Text style={styles.dateOnContainer}>\n                        <MaterialCommunityIcons\n                            name=\"table-eye\"\n                            size={28}\n                            color=\"#00adf5\"\n                        />{' '}\n                        Upcoming Buyers</Text>\n\n                    {/* List of user's bookings */}\n                    {bookedSlots && bookedSlots.length > 0 ? (\n                        <>\n                        {sortedSchedules.map((item) => (\n                            <AppointmentCard schedule={item} propertyId={item.propertyId} onPress={() => {\n                                navigation.navigate('View Appointment Detail', { userId: item.userId, propertyId: item.propertyId, scheduleId: item.scheduleId });\n                            }} />\n                        ))}\n                    </>                   \n                    ) : (\n                        <Text style={styles.noAvailabilityText}>There are no bookings for any viewings. </Text>\n                    )}\n                </View>\n            </ScrollView>\n            <View style={styles.buttonContainer}>\n                <TouchableOpacity style={styles.removeButton} onPress={handleRemove}>\n                    <Ionicons name=\"trash-outline\" size={18} color=\"white\" />\n                    {/* <Text style={styles.removeButtonText}>Remove</Text> */}\n                </TouchableOpacity>\n                <TouchableOpacity style={styles.saveChangesButton} onPress={handleSubmit}>\n                    <Ionicons name=\"save-outline\" size={18} color=\"white\" />\n                    <Text style={styles.saveChangesButtonText}>Save</Text>\n                </TouchableOpacity>\n            </View>\n        </View>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: 'white',\n        padding: 16,\n    },\n    calendarContainer: {\n        flex: 1,\n        borderRadius: 8,\n        padding: 0,\n        marginBottom: 10,\n    },\n    timeSlotsContainer: {\n        flex: 1,\n        backgroundColor: 'white',\n        borderRadius: 8,\n        padding: 16,\n        borderWidth: 0.2,\n        borderColor: 'gray',\n    },\n    timePicker: {\n        flex: 1,\n        borderWidth: 1,\n        borderColor: 'gray',\n        borderRadius: 4,\n        padding: 10,\n        margin: 5,\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    timePickerText: {\n        fontSize: 13,\n    },\n    dateOnContainer: {\n        fontSize: 25,\n        fontWeight: 'bold',\n        marginBottom: 10,\n        marginLeft: 5,\n    },\n    headerContainer: {\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginBottom: 20,\n    },\n    header: {\n        fontSize: 22,\n        fontWeight: 'bold',\n        marginLeft: 0,\n        marginTop: 0,\n    },\n    saveChangesButton: {\n        backgroundColor: 'green',\n        padding: 10,\n        borderRadius: 5,\n        marginTop: 10,\n        alignItems: 'center',\n        flexDirection: 'row',\n        justifyContent: 'center',\n        width: '60%',\n        marginRight: 40,\n        marginLeft: 0,\n    },\n    saveChangesButtonText: {\n        color: 'white',\n        marginLeft: 10,\n    },\n    timePickers: {\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n    },\n    backButton: {\n        padding: 10,\n        marginRight: 20,\n    },\n    buttonContainer: {\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        marginTop: 10,\n    },\n    removeButton: {\n        backgroundColor: 'red',\n        padding: 10,\n        borderRadius: 5,\n        marginTop: 10,\n        // alignItems: 'center',\n        flexDirection: 'row',\n        justifyContent: 'center',\n        width: 50,\n        marginLeft: 50,\n        // flex: 1,\n    },\n    removeButtonText: {\n        color: 'white',\n        marginLeft: 10,\n    },\n    bookingContainer: {\n        flex: 1,\n        marginTop: 10,\n        backgroundColor: 'white',\n        borderRadius: 8,\n        padding: 16,\n        borderWidth: 0.2,\n        borderColor: 'gray',\n        marginBottom: 10,\n    },\n    bookingItem: {\n        marginTop: 10,\n        borderWidth: 1,\n        borderColor: 'lightgray',\n        borderRadius: 8,\n        padding: 16,\n        marginBottom: 10,\n        backgroundColor: 'white',\n    },\n    bookingItemText: {\n        fontSize: 16,\n        marginBottom: 8,\n    },\n    bookingItemTextLabel: {\n        fontSize: 16,\n        marginBottom: 8,\n        fontWeight: 'bold',\n    },\n    noAvailabilityText: {\n        fontSize: 16,\n        textAlign: 'center',\n        marginTop: 10,\n    },\n});\n\nexport default SetSchedule;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}