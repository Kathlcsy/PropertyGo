{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport RNHTMLtoPDF from \"react-native-html-to-pdf\";\nimport * as Sharing from \"expo-sharing\";\nimport * as FileSystem from 'expo-file-system';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { BASE_URL } from \"../utils/documentApi\";\nexports.createPDF = _asyncToGenerator(function* () {\n  try {\n    var options = {\n      html: '<h1>Hello World!</h1><p>This is a sample PDF document generated using react-native-html-to-pdf.</p>',\n      fileName: 'sample',\n      directory: 'Documents'\n    };\n    var pdf = yield RNHTMLtoPDF.convert(options);\n    console.log(\"PDF: \", pdf);\n    var fileuri = pdf.filePath;\n    Alert.alert('PDF Created!', `PDF Path: ${pdf.filePath}`);\n    var isAvailable = yield Sharing.isAvailableAsync();\n    if (!isAvailable) {\n      Alert.alert(`Uh oh, sharing isn't available on your platform`);\n      return;\n    }\n    if (fileuri) {\n      Alert.alert(\"Downloaded to \" + fileuri);\n      yield Sharing.shareAsync(fileuri);\n    } else {\n      alert(\"Failed to download PDF\");\n    }\n  } catch (error) {\n    Alert.alert('Error', 'Sorry, something went wrong. ', error);\n  }\n});\nexports.downloadAndOpenPDF = function () {\n  var _ref2 = _asyncToGenerator(function* (USER_ID) {\n    try {\n      var pdfURL = `${BASE_URL}/user/transactions/pdf/${USER_ID}`;\n      var _yield$FileSystem$dow = yield FileSystem.downloadAsync(pdfURL, FileSystem.cacheDirectory + 'temp.pdf'),\n        uri = _yield$FileSystem$dow.uri;\n      if (!(yield Sharing.isAvailableAsync())) {\n        alert(\"Sharing isn't available on your platform\");\n        return;\n      }\n      yield Sharing.shareAsync(uri);\n    } catch (error) {\n      console.error(\"Error fetching, saving or sharing PDF:\", error);\n    }\n  });\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["RNHTMLtoPDF","Sharing","FileSystem","Alert","BASE_URL","exports","createPDF","_asyncToGenerator","options","html","fileName","directory","pdf","convert","console","log","fileuri","filePath","alert","isAvailable","isAvailableAsync","shareAsync","error","downloadAndOpenPDF","_ref2","USER_ID","pdfURL","_yield$FileSystem$dow","downloadAsync","cacheDirectory","uri","_x","apply","arguments"],"sources":["/Users/kathleen/Documents/IS4103Capstone/PropertyGo/frontend/mobile/services/pdfReport.js"],"sourcesContent":["import RNHTMLtoPDF from \"react-native-html-to-pdf\";\nimport * as Sharing from \"expo-sharing\";\nimport * as FileSystem from 'expo-file-system';\nimport {Alert} from \"react-native\";\nimport {BASE_URL} from \"../utils/documentApi\";\n\nexports.createPDF = async () => {\n    try {\n        const options = {\n            html: '<h1>Hello World!</h1><p>This is a sample PDF document generated using react-native-html-to-pdf.</p>',\n            fileName: 'sample',\n            directory: 'Documents',\n        };\n\n        const pdf = await RNHTMLtoPDF.convert(options);\n        console.log(\"PDF: \", pdf);\n        const fileuri = pdf.filePath\n        Alert.alert('PDF Created!', `PDF Path: ${pdf.filePath}`);\n        const isAvailable = await Sharing.isAvailableAsync();\n        if (!isAvailable) {\n            Alert.alert(`Uh oh, sharing isn't available on your platform`);\n            return;\n        }\n\n        if (fileuri) {\n            Alert.alert(\"Downloaded to \" + fileuri);\n            await Sharing.shareAsync(fileuri);\n        } else {\n            alert(\"Failed to download PDF\");\n        }\n    } catch (error) {\n        Alert.alert('Error', 'Sorry, something went wrong. ', error);\n    }\n};\n\nexports.downloadAndOpenPDF = async (USER_ID) => {\n    try {\n        // URL of your Express server that generates the PDF\n        const pdfURL = `${BASE_URL}/user/transactions/pdf/${USER_ID}`;\n        // Download the PDF to a temporary location on the device\n        const { uri } = await FileSystem.downloadAsync(\n            pdfURL,\n            FileSystem.cacheDirectory + 'temp.pdf'\n        );\n        // Check if sharing is possible\n        if (!(await Sharing.isAvailableAsync())) {\n            alert(\"Sharing isn't available on your platform\");\n            return;\n        }\n        // Share the PDF using the device's native share modal\n        await Sharing.shareAsync(uri);\n    } catch (error) {\n        console.error(\"Error fetching, saving or sharing PDF:\", error);\n    }\n};\n\n"],"mappings":";AAAA,OAAOA,WAAW,MAAM,0BAA0B;AAClD,OAAO,KAAKC,OAAO,MAAM,cAAc;AACvC,OAAO,KAAKC,UAAU,MAAM,kBAAkB;AAAC,OAAAC,KAAA;AAE/C,SAAQC,QAAQ;AAEhBC,OAAO,CAACC,SAAS,GAAAC,iBAAA,CAAG,aAAY;EAC5B,IAAI;IACA,IAAMC,OAAO,GAAG;MACZC,IAAI,EAAE,qGAAqG;MAC3GC,QAAQ,EAAE,QAAQ;MAClBC,SAAS,EAAE;IACf,CAAC;IAED,IAAMC,GAAG,SAASZ,WAAW,CAACa,OAAO,CAACL,OAAO,CAAC;IAC9CM,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEH,GAAG,CAAC;IACzB,IAAMI,OAAO,GAAGJ,GAAG,CAACK,QAAQ;IAC5Bd,KAAK,CAACe,KAAK,CAAC,cAAc,EAAG,aAAYN,GAAG,CAACK,QAAS,EAAC,CAAC;IACxD,IAAME,WAAW,SAASlB,OAAO,CAACmB,gBAAgB,CAAC,CAAC;IACpD,IAAI,CAACD,WAAW,EAAE;MACdhB,KAAK,CAACe,KAAK,CAAE,iDAAgD,CAAC;MAC9D;IACJ;IAEA,IAAIF,OAAO,EAAE;MACTb,KAAK,CAACe,KAAK,CAAC,gBAAgB,GAAGF,OAAO,CAAC;MACvC,MAAMf,OAAO,CAACoB,UAAU,CAACL,OAAO,CAAC;IACrC,CAAC,MAAM;MACHE,KAAK,CAAC,wBAAwB,CAAC;IACnC;EACJ,CAAC,CAAC,OAAOI,KAAK,EAAE;IACZnB,KAAK,CAACe,KAAK,CAAC,OAAO,EAAE,+BAA+B,EAAEI,KAAK,CAAC;EAChE;AACJ,CAAC;AAEDjB,OAAO,CAACkB,kBAAkB;EAAA,IAAAC,KAAA,GAAAjB,iBAAA,CAAG,WAAOkB,OAAO,EAAK;IAC5C,IAAI;MAEA,IAAMC,MAAM,GAAI,GAAEtB,QAAS,0BAAyBqB,OAAQ,EAAC;MAE7D,IAAAE,qBAAA,SAAsBzB,UAAU,CAAC0B,aAAa,CAC1CF,MAAM,EACNxB,UAAU,CAAC2B,cAAc,GAAG,UAChC,CAAC;QAHOC,GAAG,GAAAH,qBAAA,CAAHG,GAAG;MAKX,IAAI,QAAQ7B,OAAO,CAACmB,gBAAgB,CAAC,CAAC,CAAC,EAAE;QACrCF,KAAK,CAAC,0CAA0C,CAAC;QACjD;MACJ;MAEA,MAAMjB,OAAO,CAACoB,UAAU,CAACS,GAAG,CAAC;IACjC,CAAC,CAAC,OAAOR,KAAK,EAAE;MACZR,OAAO,CAACQ,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;IAClE;EACJ,CAAC;EAAA,iBAAAS,EAAA;IAAA,OAAAP,KAAA,CAAAQ,KAAA,OAAAC,SAAA;EAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}