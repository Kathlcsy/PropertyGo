{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    userName = _useState2[0],\n    setUserName = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    password = _useState4[0],\n    setPassword = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    loginMessage = _useState6[0],\n    setLoginMessage = _useState6[1];\n  var handleLogin = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        var _response = yield fetch('http:///localhost:3000/user/login', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            userName: userName,\n            password: password\n          })\n        });\n        var data = yield _response.json();\n        if (_response.ok) {\n          setLoginMessage('Login successful');\n          setTimeout(function () {\n            setLoginMessage(null);\n            navigation.navigate('Home', {\n              user: data\n            });\n          }, 3000);\n        } else {\n          setLoginMessage(data.message);\n          setTimeout(function () {\n            setLoginMessage(null);\n          }, 3000);\n        }\n      } catch (error) {\n        Alert.alert('Error', error.message);\n      }\n    });\n    return function handleLogin() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    style: {\n      padding: 16\n    },\n    children: [loginMessage && _jsx(Text, {\n      style: {\n        color: response.ok ? 'green' : 'red',\n        marginBottom: 8\n      },\n      children: loginMessage\n    }), _jsx(TextInput, {\n      style: {\n        padding: 16,\n        marginBottom: 8,\n        borderWidth: 1,\n        borderRadius: 8\n      },\n      placeholder: \"Username\",\n      value: userName,\n      onChangeText: setUserName\n    }), _jsx(TextInput, {\n      style: {\n        padding: 16,\n        marginBottom: 8,\n        borderWidth: 1,\n        borderRadius: 8\n      },\n      placeholder: \"Password\",\n      value: password,\n      onChangeText: setPassword,\n      secureTextEntry: true\n    }), _jsx(Button, {\n      title: \"Login\",\n      onPress: handleLogin\n    })]\n  });\n}\nexport default LoginScreen;","map":{"version":3,"names":["React","useState","View","Text","TextInput","Button","Alert","jsx","_jsx","jsxs","_jsxs","LoginScreen","_ref","navigation","_useState","_useState2","_slicedToArray","userName","setUserName","_useState3","_useState4","password","setPassword","_useState5","_useState6","loginMessage","setLoginMessage","handleLogin","_ref2","_asyncToGenerator","response","fetch","method","headers","body","JSON","stringify","data","json","ok","setTimeout","navigate","user","message","error","alert","apply","arguments","style","padding","children","color","marginBottom","borderWidth","borderRadius","placeholder","value","onChangeText","secureTextEntry","title","onPress"],"sources":["/Users/wayneonn/Code/PropertyGo/frontend/mobile/LoginScreen.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { View, Text, TextInput, Button, Alert } from 'react-native';\n\nfunction LoginScreen({ navigation }) {\n  const [userName, setUserName] = useState('');\n  const [password, setPassword] = useState('');\n  const [loginMessage, setLoginMessage] = useState(null); // State to manage login messages\n\n  const handleLogin = async () => {\n    try {\n      const response = await fetch('http:///localhost:3000/user/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ userName, password }),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        setLoginMessage('Login successful'); // Set the success message\n        setTimeout(() => {\n          setLoginMessage(null); // Clear the message after 3 seconds\n          navigation.navigate('Home', { user: data });\n        }, 3000);\n      } else {\n        setLoginMessage(data.message); // Set the error message\n        setTimeout(() => {\n          setLoginMessage(null); // Clear the message after 3 seconds\n        }, 3000);\n      }\n    } catch (error) {\n      Alert.alert('Error', error.message);\n    }\n  };\n\n  return (\n    <View style={{ padding: 16 }}>\n      {loginMessage && <Text style={{ color: response.ok ? 'green' : 'red', marginBottom: 8 }}>{loginMessage}</Text>}\n      <TextInput\n        style={{ padding: 16, marginBottom: 8, borderWidth: 1, borderRadius: 8 }}\n        placeholder=\"Username\"\n        value={userName}\n        onChangeText={setUserName}\n      />\n      <TextInput\n        style={{ padding: 16, marginBottom: 8, borderWidth: 1, borderRadius: 8 }}\n        placeholder=\"Password\"\n        value={password}\n        onChangeText={setPassword}\n        secureTextEntry\n      />\n      <Button title=\"Login\" onPress={handleLogin} />\n    </View>\n  );\n}\n\nexport default LoginScreen;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}