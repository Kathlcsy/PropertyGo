{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useContext, useEffect, useState } from 'react';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Calendar } from 'react-native-calendars';\nimport { useNavigation } from '@react-navigation/native';\nimport { AuthContext } from \"../../../AuthContext\";\nimport { createSchedule, getScheduleByDateAndPropertyId, getScheduleBySellerId, getScheduleByUserId, removeSchedule, updateSchedule } from \"../../../utils/scheduleApi\";\nimport AppointmentCard from \"../../schedule/AppointmentCard\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar Appointments = function Appointments(_ref) {\n  var route = _ref.route;\n  var navigation = useNavigation();\n  var _useContext = useContext(AuthContext),\n    user = _useContext.user;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedTime = _useState2[0],\n    setSelectedTime = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    selectedSchedule = _useState4[0],\n    setSelectedSchedule = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    startTime = _useState6[0],\n    setStartTime = _useState6[1];\n  var _useState7 = useState(null),\n    _useState8 = _slicedToArray(_useState7, 2),\n    endTime = _useState8[0],\n    setEndTime = _useState8[1];\n  var userId = user.user.userId;\n  var userType = user.user.userType;\n  var _useState9 = useState(new Date()),\n    _useState10 = _slicedToArray(_useState9, 2),\n    selectedDate = _useState10[0],\n    setSelectedDate = _useState10[1];\n  var _useState11 = useState([]),\n    _useState12 = _slicedToArray(_useState11, 2),\n    availability = _useState12[0],\n    setAvailability = _useState12[1];\n  var _useState13 = useState(false),\n    _useState14 = _slicedToArray(_useState13, 2),\n    isToBeUpdated = _useState14[0],\n    setIsToBeUpdated = _useState14[1];\n  var _useState15 = useState(null),\n    _useState16 = _slicedToArray(_useState15, 2),\n    viewingAvailabilityId = _useState16[0],\n    setViewingAvailabilityId = _useState16[1];\n  var _useState17 = useState(null),\n    _useState18 = _slicedToArray(_useState17, 2),\n    scheduleId = _useState18[0],\n    setScheduleId = _useState18[1];\n  var _useState19 = useState(true),\n    _useState20 = _slicedToArray(_useState19, 2),\n    firstLoad = _useState20[0],\n    setFirstLoad = _useState20[1];\n  var _useState21 = useState([]),\n    _useState22 = _slicedToArray(_useState21, 2),\n    timeSlots = _useState22[0],\n    setTimeSlots = _useState22[1];\n  var _useState23 = useState([]),\n    _useState24 = _slicedToArray(_useState23, 2),\n    takenTimeSlots = _useState24[0],\n    setTakenTimeSlots = _useState24[1];\n  var _useState25 = useState(new Date()),\n    _useState26 = _slicedToArray(_useState25, 2),\n    currentDate = _useState26[0],\n    setCurrentDate = _useState26[1];\n  var _useState27 = useState(false),\n    _useState28 = _slicedToArray(_useState27, 2),\n    refreshFlatList = _useState28[0],\n    setRefreshFlatList = _useState28[1];\n  var _useState29 = useState([]),\n    _useState30 = _slicedToArray(_useState29, 2),\n    userSlots = _useState30[0],\n    setUserSlots = _useState30[1];\n  var _useState31 = useState([]),\n    _useState32 = _slicedToArray(_useState31, 2),\n    sellerSlots = _useState32[0],\n    setSellerSlots = _useState32[1];\n  var _useState33 = useState([]),\n    _useState34 = _slicedToArray(_useState33, 2),\n    userBuySchedules = _useState34[0],\n    setUserBuySchedules = _useState34[1];\n  var _useState35 = useState([]),\n    _useState36 = _slicedToArray(_useState35, 2),\n    sellerSellSchedules = _useState36[0],\n    setSellerSellSchedules = _useState36[1];\n  var numColumns = 3;\n  useEffect(function () {\n    fetchScheduleByUser();\n    fetchScheduleBySeller();\n  }, [selectedDate]);\n  useEffect(function () {\n    if (firstLoad) {\n      setTimeSlots(generateTimeSlots());\n      console.log(\"timeslots: \", generateTimeSlots());\n    }\n  }, []);\n  var fetchScheduleByUser = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      var _yield$getScheduleByU = yield getScheduleByUserId(userId),\n        success = _yield$getScheduleByU.success,\n        data = _yield$getScheduleByU.data,\n        message = _yield$getScheduleByU.message;\n      if (success) {\n        setUserSlots(data);\n        console.log(\"fetchScheduleByUser\", data);\n      } else {\n        setUserSlots([]);\n        console.error('Error fetching schedule data for user:', message);\n      }\n    });\n    return function fetchScheduleByUser() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var fetchScheduleBySeller = function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      var _yield$getScheduleByS = yield getScheduleBySellerId(userId),\n        success = _yield$getScheduleByS.success,\n        data = _yield$getScheduleByS.data,\n        message = _yield$getScheduleByS.message;\n      if (success) {\n        setSellerSlots(data);\n        console.log(\"fetchScheduleByUser\", data);\n      } else {\n        setSellerSlots([]);\n        console.error('Error fetching schedule data for user:', message);\n      }\n    });\n    return function fetchScheduleBySeller() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var fetchScheduleData = function () {\n    var _ref4 = _asyncToGenerator(function* () {\n      var _yield$getScheduleByD = yield getScheduleByDateAndPropertyId(selectedDate, propertyListingId),\n        success = _yield$getScheduleByD.success,\n        data = _yield$getScheduleByD.data,\n        message = _yield$getScheduleByD.message;\n      if (success) {\n        setTakenTimeSlots(data);\n        setIsToBeUpdated(data.some(function (item) {\n          return item.userId === userId;\n        }));\n      } else {\n        console.error('Error fetching schedule data:', message);\n        setTakenTimeSlots([]);\n      }\n    });\n    return function fetchScheduleData() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  var convertToDateTime = function convertToDateTime(timeString) {\n    var _timeString$split = timeString.split(':'),\n      _timeString$split2 = _slicedToArray(_timeString$split, 3),\n      hours = _timeString$split2[0],\n      minutes = _timeString$split2[1],\n      seconds = _timeString$split2[2];\n    var formattedDate = new Date();\n    formattedDate.setHours(parseInt(hours, 10));\n    formattedDate.setMinutes(parseInt(minutes, 10));\n    formattedDate.setSeconds(parseInt(seconds, 10));\n    return formattedDate;\n  };\n  var handleTimeSlotSelect = function handleTimeSlotSelect(time, scheduleId) {\n    var selectedDateTime = new Date(selectedDate);\n    var _time$split = time.split(' '),\n      _time$split2 = _slicedToArray(_time$split, 2),\n      timeWithoutAmPm = _time$split2[0],\n      period = _time$split2[1];\n    var _timeWithoutAmPm$spli = timeWithoutAmPm.split(':').map(Number),\n      _timeWithoutAmPm$spli2 = _slicedToArray(_timeWithoutAmPm$spli, 2),\n      hours = _timeWithoutAmPm$spli2[0],\n      minutes = _timeWithoutAmPm$spli2[1];\n    var adjustedHours = hours;\n    if (period === 'PM' && hours !== 12) {\n      adjustedHours += 12;\n    } else if (period === 'AM' && hours === 12) {\n      adjustedHours = 0;\n    }\n    selectedDateTime.setHours(adjustedHours);\n    selectedDateTime.setMinutes(minutes);\n    setSelectedTime(time);\n    setSelectedSchedule(selectedDateTime);\n    setScheduleId(scheduleId);\n    setTimeSlots(function (prevTimeSlots) {\n      return prevTimeSlots.map(function (slot) {\n        return slot.time === time ? _objectSpread(_objectSpread({}, slot), {}, {\n          userBooked: true\n        }) : slot;\n      });\n    });\n  };\n  function convertTimeTo12HourFormat(time) {\n    var _time$split3 = time.split(':'),\n      _time$split4 = _slicedToArray(_time$split3, 3),\n      hours = _time$split4[0],\n      minutes = _time$split4[1],\n      seconds = _time$split4[2];\n    var period = 'AM';\n    var formattedHours = parseInt(hours);\n    if (formattedHours >= 12) {\n      period = 'PM';\n      if (formattedHours > 12) {\n        formattedHours -= 12;\n      }\n    }\n    return `${formattedHours}:${minutes} ${period}`;\n  }\n  var generateTimeSlots = function generateTimeSlots() {\n    console.log('generateTimeSlots() selectedDate:', selectedDate);\n    console.log('generateTimeSlots() startTime: ', startTime);\n    console.log('generateTimeSlots() endTime: ', endTime);\n    var timeSlots = [];\n    var userBookedFlag = false;\n    if (startTime && endTime) {\n      var startHour = startTime.getHours();\n      var endHour = endTime.getHours();\n      var _loop = function _loop() {\n        var hour = i % 12 || 12;\n        var ampm = i < 12 ? 'AM' : 'PM';\n        var time = `${hour}:00 ${ampm}`;\n        var isTimeSlotTaken = takenTimeSlots.some(function (takenSlot) {\n          return convertTimeTo12HourFormat(takenSlot.meetupTime) === time;\n        });\n        var userBookedSlot = takenTimeSlots.find(function (takenSlot) {\n          return takenSlot.userId === userId && convertTimeTo12HourFormat(takenSlot.meetupTime) === time;\n        });\n        var scheduleId = userBookedSlot ? userBookedSlot.scheduleId : null;\n        var isSlotDisabled = !userBookedSlot && isTimeSlotTaken;\n        timeSlots.push({\n          id: i.toString(),\n          time: time,\n          isTimeSlotTaken: isTimeSlotTaken,\n          userBooked: !!userBookedSlot,\n          isSlotDisabled: isSlotDisabled,\n          scheduleId: scheduleId\n        });\n        if (!!userBookedSlot) {\n          userBookedFlag = true;\n        }\n      };\n      for (var i = startHour; i <= endHour; i++) {\n        _loop();\n      }\n    }\n    console.log('timeSlots: ', timeSlots, \"for: \", selectedDate);\n    if (firstLoad) {\n      return [{\n        id: 'initial-load',\n        time: 'Select a time slot',\n        isSlotDisabled: true,\n        userBooked: false\n      }];\n    }\n    return timeSlots;\n  };\n  var handleDayPress = function handleDayPress(day) {\n    setFirstLoad(false);\n    setSelectedDate(day.dateString);\n    setSelectedTime(null);\n    setStartTime(null);\n    setEndTime(null);\n    setCurrentDate(new Date(day.dateString));\n    var userBuySchedules = userSlots.filter(function (schedule) {\n      return schedule.meetupDate === day.dateString;\n    });\n    setUserBuySchedules(userBuySchedules);\n    var sellerSellSchedules = sellerSlots.filter(function (schedule) {\n      return schedule.meetupDate === day.dateString;\n    });\n    setSellerSellSchedules(sellerSellSchedules);\n  };\n  var formatDate = function formatDate(dateString) {\n    var options = {\n      day: '2-digit',\n      month: 'long',\n      year: 'numeric'\n    };\n    return new Date(dateString).toLocaleDateString(undefined, options);\n  };\n  var handleSubmit = function () {\n    var _ref5 = _asyncToGenerator(function* () {\n      console.log('scheduleId Here: ', scheduleId);\n      if (!selectedDate || !selectedTime) {\n        Alert.alert('Incomplete Information', 'Please select a date, start time, and end time.');\n        return;\n      }\n      var scheduleData = {\n        meetupDate: selectedDate,\n        meetupTime: selectedSchedule.toLocaleTimeString('en-US', {\n          hour: '2-digit',\n          minute: '2-digit',\n          hour12: false\n        }),\n        userId: userId,\n        propertyId: propertyListingId\n      };\n      var response;\n      if (isToBeUpdated === false) {\n        response = yield createSchedule(scheduleData);\n        if (response.success) {\n          Alert.alert('Success', 'Schedule booked successfully.');\n          setSelectedTime(null);\n          setSelectedDate(selectedDate);\n        } else {\n          Alert.alert('Error', 'Failed to book. Please try again later.');\n        }\n      } else {\n        response = yield updateSchedule(scheduleData, userId, selectedDate);\n        if (response.success) {\n          Alert.alert('Success', 'Schedule updated successfully.');\n          setSelectedTime(null);\n          setSelectedDate(selectedDate);\n        } else {\n          Alert.alert('Error', 'Failed to update. Please try again later.');\n        }\n      }\n      setTimeSlots(generateTimeSlots());\n      setRefreshFlatList(function (prev) {\n        return !prev;\n      });\n      fetchScheduleData();\n      fetchScheduleByUser();\n    });\n    return function handleSubmit() {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n  var handleRemove = function () {\n    var _ref6 = _asyncToGenerator(function* () {\n      console.log('scheduleId: ', scheduleId);\n      if (scheduleId) {\n        var response = yield removeSchedule(scheduleId);\n        if (response.success) {\n          Alert.alert('Success', 'Availability successfully removed.');\n          setSelectedTime(null);\n          setScheduleId(null);\n          setIsToBeUpdated(false);\n        } else {\n          Alert.alert('Error', 'Failed to remove availability. Please try again later.');\n          console.log('Error:', response.message);\n        }\n      } else {\n        Alert.alert('No Availability to Remove', 'There is no availability to remove for the selected date.');\n      }\n      fetchScheduleData();\n      fetchScheduleByUser();\n    });\n    return function handleRemove() {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n  var getMarkedDates = function getMarkedDates() {\n    var markedDates = {};\n    var seller = {\n      key: 'seller',\n      color: 'red'\n    };\n    var buyer = {\n      key: 'buyer',\n      color: 'green'\n    };\n    if (userSlots.length === 0 || sellerSlots.length === 0) {\n      markedDates[selectedDate] = {\n        selected: true,\n        selectedDotColor: 'blue'\n      };\n    }\n    userSlots.forEach(function (userSlot) {\n      var date = userSlot.meetupDate;\n      if (!markedDates[date]) {\n        markedDates[date] = {\n          dots: []\n        };\n      }\n      markedDates[date].dots.push(buyer);\n      if (date === selectedDate) {\n        markedDates[date].selected = true;\n        markedDates[date].selectedDotColor = 'blue';\n      }\n    });\n    sellerSlots.forEach(function (availability) {\n      var date = availability.meetupDate;\n      if (!markedDates[date]) {\n        markedDates[date] = {\n          dots: []\n        };\n      }\n      markedDates[date].dots.push(seller);\n      if (date === selectedDate) {\n        markedDates[date].selected = true;\n        markedDates[date].selectedDotColor = 'blue';\n      }\n    });\n    return markedDates;\n  };\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsxs(ScrollView, {\n      style: styles.scrollView,\n      contentContainerStyle: styles.scrollViewContent,\n      keyboardShouldPersistTaps: \"handled\",\n      children: [_jsx(View, {\n        style: styles.headerContainer,\n        children: _jsx(Text, {\n          style: styles.header,\n          children: \"Appointments\"\n        })\n      }), _jsx(View, {\n        style: styles.calendarContainer,\n        children: _jsx(Calendar, {\n          onDayPress: handleDayPress,\n          minDate: new Date(),\n          markingType: 'multi-dot',\n          style: {\n            borderWidth: 0.5,\n            borderColor: 'gray',\n            height: 360\n          },\n          theme: {\n            backgroundColor: '#ffffff',\n            calendarBackground: '#ffffff',\n            textSectionTitleColor: '#b6c1cd',\n            selectedDayBackgroundColor: '#00adf5',\n            selectedDayTextColor: '#ffffff',\n            todayTextColor: '#00adf5',\n            dayTextColor: '#2d4150',\n            textDisabledColor: '#d9e1e8'\n          },\n          markedDates: getMarkedDates()\n        })\n      }), _jsx(View, {\n        style: styles.timeSlotsContainer,\n        children: _jsx(Text, {\n          style: styles.dateOnContainer,\n          children: formatDate(selectedDate)\n        })\n      }), ![\"LAWYER\", \"CONTRACTOR\", \"PROPERTY AGENT\"].includes(user.user.userType) ? _jsxs(_Fragment, {\n        children: [_jsxs(View, {\n          style: styles.bookingContainer,\n          children: [_jsx(Text, {\n            style: styles.dateOnContainer,\n            children: \"To Buy - Upcoming To View\"\n          }), userBuySchedules && userBuySchedules.length > 0 ? _jsx(FlatList, {\n            data: userBuySchedules,\n            keyExtractor: function keyExtractor(item) {\n              return item.scheduleId.toString();\n            },\n            renderItem: function renderItem(_ref7) {\n              var item = _ref7.item;\n              return _jsx(AppointmentCard, {\n                schedule: item,\n                propertyId: item.propertyId,\n                onPress: function onPress() {\n                  navigation.navigate('View Appointment Detail', {\n                    userId: item.sellerId,\n                    propertyId: item.propertyId,\n                    schedule: item\n                  });\n                }\n              });\n            }\n          }) : _jsx(Text, {\n            style: styles.noAvailabilityText,\n            children: \"No bookings found.\"\n          })]\n        }), _jsxs(View, {\n          style: styles.bookingContainer,\n          children: [_jsx(Text, {\n            style: styles.dateOnContainer,\n            children: \"To Sell - Buyers To View Unit\"\n          }), sellerSellSchedules && sellerSellSchedules.length > 0 ? _jsx(FlatList, {\n            data: sellerSellSchedules,\n            keyExtractor: function keyExtractor(item) {\n              return item.scheduleId.toString();\n            },\n            renderItem: function renderItem(_ref8) {\n              var item = _ref8.item;\n              return _jsx(AppointmentCard, {\n                schedule: item,\n                propertyId: item.propertyId,\n                onPress: function onPress() {\n                  navigation.navigate('View Appointment Detail', {\n                    userId: sellerUserId,\n                    propertyId: item.propertyId,\n                    schedule: item\n                  });\n                }\n              });\n            }\n          }) : _jsx(Text, {\n            style: styles.noAvailabilityText,\n            children: \"No bookings for units listed.\"\n          })]\n        })]\n      }) : _jsx(_Fragment, {\n        children: _jsxs(View, {\n          style: styles.bookingContainer,\n          children: [_jsx(Text, {\n            style: styles.dateOnContainer,\n            children: \"Request Schedule - Upcoming \"\n          }), userBuySchedules && userBuySchedules.length > 0 ? _jsx(FlatList, {\n            data: userBuySchedules,\n            keyExtractor: function keyExtractor(item) {\n              return item.scheduleId.toString();\n            },\n            renderItem: function renderItem(_ref9) {\n              var item = _ref9.item;\n              return _jsx(AppointmentCard, {\n                schedule: item,\n                propertyId: item.propertyId,\n                onPress: function onPress() {\n                  navigation.navigate('View Appointment Detail', {\n                    userId: item.sellerId,\n                    propertyId: item.propertyId,\n                    schedule: item\n                  });\n                }\n              });\n            }\n          }) : _jsx(Text, {\n            style: styles.noAvailabilityText,\n            children: \"No bookings found.\"\n          })]\n        })\n      })]\n    })\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'white',\n    padding: 16\n  },\n  calendarContainer: {\n    flex: 1,\n    borderRadius: 8,\n    padding: 0,\n    marginBottom: 10\n  },\n  timeSlotsContainer: {\n    flex: 1,\n    backgroundColor: 'white',\n    borderRadius: 8,\n    padding: 16,\n    borderWidth: 0.2,\n    borderColor: 'gray'\n  },\n  timeSlot: {\n    flex: 1,\n    padding: 8,\n    borderWidth: 1,\n    borderColor: 'gray',\n    borderRadius: 4,\n    marginBottom: 8,\n    alignItems: 'center',\n    justifyContent: 'center',\n    margin: 4,\n    minHeight: 40\n  },\n  selectedTimeSlot: {\n    backgroundColor: 'cyan'\n  },\n  timeText: {\n    fontSize: 16\n  },\n  dateOnContainer: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    marginLeft: 5\n  },\n  headerContainer: {\n    marginBottom: 20\n  },\n  header: {\n    fontSize: 25,\n    fontWeight: 'bold',\n    marginTop: 5,\n    textAlign: 'center'\n  },\n  saveChangesButton: {\n    backgroundColor: 'green',\n    padding: 10,\n    borderRadius: 5,\n    marginTop: 10,\n    alignItems: 'center',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    width: '60%',\n    marginRight: 40,\n    marginLeft: 0\n  },\n  saveChangesButtonText: {\n    color: 'white',\n    marginLeft: 10\n  },\n  timePickers: {\n    flexDirection: 'row',\n    justifyContent: 'space-between'\n  },\n  backButton: {\n    padding: 10,\n    marginRight: 20\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginTop: 10\n  },\n  removeButton: {\n    backgroundColor: 'red',\n    padding: 10,\n    borderRadius: 5,\n    marginTop: 10,\n    flexDirection: 'row',\n    justifyContent: 'center',\n    width: 50,\n    marginLeft: 50\n  },\n  removeButtonText: {\n    color: 'white',\n    marginLeft: 10\n  },\n  noAvailabilityText: {\n    fontSize: 16,\n    textAlign: 'center',\n    marginTop: 10\n  },\n  bookingContainer: {\n    flex: 1,\n    marginTop: 10,\n    backgroundColor: 'white',\n    borderRadius: 8,\n    padding: 16,\n    borderWidth: 0.2,\n    borderColor: 'gray',\n    marginBottom: 10\n  },\n  bookingItem: {\n    marginTop: 10,\n    borderWidth: 1,\n    borderColor: 'lightgray',\n    borderRadius: 8,\n    padding: 16,\n    marginBottom: 10,\n    backgroundColor: 'white'\n  },\n  bookingItemText: {\n    fontSize: 16,\n    marginBottom: 8\n  },\n  bookingItemTextLabel: {\n    fontSize: 16,\n    marginBottom: 8,\n    fontWeight: 'bold'\n  }\n});\nexport default Appointments;","map":{"version":3,"names":["React","useContext","useEffect","useState","Alert","FlatList","ScrollView","StyleSheet","Text","View","Calendar","useNavigation","AuthContext","createSchedule","getScheduleByDateAndPropertyId","getScheduleBySellerId","getScheduleByUserId","removeSchedule","updateSchedule","AppointmentCard","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Appointments","_ref","route","navigation","_useContext","user","_useState","_useState2","_slicedToArray","selectedTime","setSelectedTime","_useState3","_useState4","selectedSchedule","setSelectedSchedule","_useState5","_useState6","startTime","setStartTime","_useState7","_useState8","endTime","setEndTime","userId","userType","_useState9","Date","_useState10","selectedDate","setSelectedDate","_useState11","_useState12","availability","setAvailability","_useState13","_useState14","isToBeUpdated","setIsToBeUpdated","_useState15","_useState16","viewingAvailabilityId","setViewingAvailabilityId","_useState17","_useState18","scheduleId","setScheduleId","_useState19","_useState20","firstLoad","setFirstLoad","_useState21","_useState22","timeSlots","setTimeSlots","_useState23","_useState24","takenTimeSlots","setTakenTimeSlots","_useState25","_useState26","currentDate","setCurrentDate","_useState27","_useState28","refreshFlatList","setRefreshFlatList","_useState29","_useState30","userSlots","setUserSlots","_useState31","_useState32","sellerSlots","setSellerSlots","_useState33","_useState34","userBuySchedules","setUserBuySchedules","_useState35","_useState36","sellerSellSchedules","setSellerSellSchedules","numColumns","fetchScheduleByUser","fetchScheduleBySeller","generateTimeSlots","console","log","_ref2","_asyncToGenerator","_yield$getScheduleByU","success","data","message","error","apply","arguments","_ref3","_yield$getScheduleByS","fetchScheduleData","_ref4","_yield$getScheduleByD","propertyListingId","some","item","convertToDateTime","timeString","_timeString$split","split","_timeString$split2","hours","minutes","seconds","formattedDate","setHours","parseInt","setMinutes","setSeconds","handleTimeSlotSelect","time","selectedDateTime","_time$split","_time$split2","timeWithoutAmPm","period","_timeWithoutAmPm$spli","map","Number","_timeWithoutAmPm$spli2","adjustedHours","prevTimeSlots","slot","_objectSpread","userBooked","convertTimeTo12HourFormat","_time$split3","_time$split4","formattedHours","userBookedFlag","startHour","getHours","endHour","_loop","hour","i","ampm","isTimeSlotTaken","takenSlot","meetupTime","userBookedSlot","find","isSlotDisabled","push","id","toString","handleDayPress","day","dateString","filter","schedule","meetupDate","formatDate","options","month","year","toLocaleDateString","undefined","handleSubmit","_ref5","alert","scheduleData","toLocaleTimeString","minute","hour12","propertyId","response","prev","handleRemove","_ref6","getMarkedDates","markedDates","seller","key","color","buyer","length","selected","selectedDotColor","forEach","userSlot","date","dots","style","styles","container","children","scrollView","contentContainerStyle","scrollViewContent","keyboardShouldPersistTaps","headerContainer","header","calendarContainer","onDayPress","minDate","markingType","borderWidth","borderColor","height","theme","backgroundColor","calendarBackground","textSectionTitleColor","selectedDayBackgroundColor","selectedDayTextColor","todayTextColor","dayTextColor","textDisabledColor","timeSlotsContainer","dateOnContainer","includes","bookingContainer","keyExtractor","renderItem","_ref7","onPress","navigate","sellerId","noAvailabilityText","_ref8","sellerUserId","_ref9","create","flex","padding","borderRadius","marginBottom","timeSlot","alignItems","justifyContent","margin","minHeight","selectedTimeSlot","timeText","fontSize","fontWeight","marginLeft","marginTop","textAlign","saveChangesButton","flexDirection","width","marginRight","saveChangesButtonText","timePickers","backButton","buttonContainer","removeButton","removeButtonText","bookingItem","bookingItemText","bookingItemTextLabel"],"sources":["/Users/limzhongzhi/WebstormProjects/PropertyGo/frontend/mobile/screens/sideNavigatorBar/Appointment/Appointments.js"],"sourcesContent":["import React, {useContext, useEffect, useState} from 'react';\nimport {Alert, FlatList, ScrollView, StyleSheet, Text, View,} from 'react-native';\nimport {Calendar} from 'react-native-calendars';\nimport {useNavigation} from '@react-navigation/native';\nimport {AuthContext} from '../../../AuthContext';\nimport {\n    createSchedule,\n    getScheduleByDateAndPropertyId,\n    getScheduleBySellerId,\n    getScheduleByUserId,\n    removeSchedule,\n    updateSchedule,\n} from '../../../utils/scheduleApi';\nimport AppointmentCard from '../../schedule/AppointmentCard';\n\nconst Appointments = ({route}) => {\n    const navigation = useNavigation();\n    const {user} = useContext(AuthContext);\n    const [selectedTime, setSelectedTime] = useState(null);\n    const [selectedSchedule, setSelectedSchedule] = useState(null);\n    const [startTime, setStartTime] = useState(null);\n    const [endTime, setEndTime] = useState(null);\n    const userId = user.user.userId;\n    const userType = user.user.userType;\n    // const sellerUserId = userDetails.userId;\n    // Define selected date state\n    const [selectedDate, setSelectedDate] = useState(new Date());\n    const [availability, setAvailability] = useState([]);\n    const [isToBeUpdated, setIsToBeUpdated] = useState(false);\n    const [viewingAvailabilityId, setViewingAvailabilityId] = useState(null);\n    const [scheduleId, setScheduleId] = useState(null);\n    const [firstLoad, setFirstLoad] = useState(true);\n    const [timeSlots, setTimeSlots] = useState([]);\n    const [takenTimeSlots, setTakenTimeSlots] = useState([]);\n    const [currentDate, setCurrentDate] = useState(new Date());\n    const [refreshFlatList, setRefreshFlatList] = useState(false);\n    const [userSlots, setUserSlots] = useState([]);\n    const [sellerSlots, setSellerSlots] = useState([]);\n    const [userBuySchedules, setUserBuySchedules] = useState([]); // Schedules for \"To Buy\"\n    const [sellerSellSchedules, setSellerSellSchedules] = useState([]); // Schedules for \"To Sell\"\n\n    const numColumns = 3;\n\n    useEffect(() => {\n        // fetchViewingAvailabilityByDateAndPropertyId();\n        // fetchViewingAvailabilityByPropertyId();\n        // fetchScheduleData();\n        fetchScheduleByUser();\n        fetchScheduleBySeller();\n    }, [selectedDate]);\n\n\n    useEffect(() => {\n        if (firstLoad) {\n            setTimeSlots(generateTimeSlots());\n            console.log(\"timeslots: \", generateTimeSlots())\n        }\n    }, []);\n\n    const fetchScheduleByUser = async () => {\n        const {success, data, message} = await getScheduleByUserId(\n            userId\n        );\n\n        if (success) {\n            setUserSlots(data);\n            console.log(\"fetchScheduleByUser\", data)\n        } else {\n            setUserSlots([]);\n            console.error('Error fetching schedule data for user:', message);\n        }\n    };\n\n    const fetchScheduleBySeller = async () => {\n        const {success, data, message} = await getScheduleBySellerId(\n            userId\n        );\n\n        if (success) {\n            setSellerSlots(data);\n            console.log(\"fetchScheduleByUser\", data)\n        } else {\n            setSellerSlots([]);\n            console.error('Error fetching schedule data for user:', message);\n        }\n    };\n\n    const fetchScheduleData = async () => {\n        const {success, data, message} = await getScheduleByDateAndPropertyId(\n            selectedDate,\n            propertyListingId\n        );\n\n        if (success) {\n            setTakenTimeSlots(data);\n            setIsToBeUpdated(data.some(item => item.userId === userId));\n        } else {\n            console.error('Error fetching schedule data:', message);\n            setTakenTimeSlots([]);\n        }\n    };\n\n    const convertToDateTime = (timeString) => {\n        const [hours, minutes, seconds] = timeString.split(':');\n        const formattedDate = new Date();\n        formattedDate.setHours(parseInt(hours, 10));\n        formattedDate.setMinutes(parseInt(minutes, 10));\n        formattedDate.setSeconds(parseInt(seconds, 10));\n        return formattedDate;\n    };\n\n    // Function to handle time slot selection\n    const handleTimeSlotSelect = (time, scheduleId) => {\n        // Combine the selected date with the parsed time to create a DateTime object\n        const selectedDateTime = new Date(selectedDate);\n        const [timeWithoutAmPm, period] = time.split(' '); // Split time and AM/PM\n        const [hours, minutes] = timeWithoutAmPm.split(':').map(Number);\n\n        // Calculate adjusted hours for PM\n        let adjustedHours = hours;\n        if (period === 'PM' && hours !== 12) {\n            adjustedHours += 12;\n        } else if (period === 'AM' && hours === 12) {\n            adjustedHours = 0; // Midnight (12:00 AM) is represented as 0 in 24-hour format\n        }\n\n        selectedDateTime.setHours(adjustedHours);\n        selectedDateTime.setMinutes(minutes);\n\n        setSelectedTime(time);\n        setSelectedSchedule(selectedDateTime);\n        setScheduleId(scheduleId);\n\n        // Update the timeSlots array with the new userBooked value for the selected time slot\n        setTimeSlots((prevTimeSlots) =>\n            prevTimeSlots.map((slot) =>\n                slot.time === time ? {...slot, userBooked: true} : slot\n            )\n        );\n    };\n\n    function convertTimeTo12HourFormat(time) {\n        const [hours, minutes, seconds] = time.split(':');\n        let period = 'AM';\n        let formattedHours = parseInt(hours);\n\n        if (formattedHours >= 12) {\n            period = 'PM';\n            if (formattedHours > 12) {\n                formattedHours -= 12;\n            }\n        }\n\n        return `${formattedHours}:${minutes} ${period}`;\n    }\n\n    // Generate hourly time slots between start and end times\n    const generateTimeSlots = () => {\n        console.log('generateTimeSlots() selectedDate:', selectedDate)\n        console.log('generateTimeSlots() startTime: ', startTime)\n        console.log('generateTimeSlots() endTime: ', endTime)\n        const timeSlots = [];\n        let userBookedFlag = false;\n        if (startTime && endTime) {\n            const startHour = startTime.getHours();\n            const endHour = endTime.getHours();\n            for (let i = startHour; i <= endHour; i++) {\n                const hour = i % 12 || 12; // Convert to 12-hour format\n                const ampm = i < 12 ? 'AM' : 'PM';\n                const time = `${hour}:00 ${ampm}`;\n                const isTimeSlotTaken = takenTimeSlots.some(\n                    (takenSlot) => convertTimeTo12HourFormat(takenSlot.meetupTime) === time\n                );\n                const userBookedSlot = takenTimeSlots.find(\n                    (takenSlot) =>\n                        takenSlot.userId === userId &&\n                        convertTimeTo12HourFormat(takenSlot.meetupTime) === time\n                );\n\n                const scheduleId = userBookedSlot ? userBookedSlot.scheduleId : null;\n\n                const isSlotDisabled = !userBookedSlot && isTimeSlotTaken;\n                timeSlots.push({\n                    id: i.toString(),\n                    time,\n                    isTimeSlotTaken,\n                    userBooked: !!userBookedSlot,\n                    isSlotDisabled,\n                    scheduleId, // Store the scheduleId if the slot is taken by a user\n                });\n\n                if (!!userBookedSlot) {\n                    userBookedFlag = true;\n                }\n            }\n            // setUpdateSchedule(userBookedFlag);\n        }\n        console.log('timeSlots: ', timeSlots, \"for: \", selectedDate)\n        if (firstLoad) {\n            // Display a message for the initial load\n            return [\n                {\n                    id: 'initial-load',\n                    time: 'Select a time slot',\n                    isSlotDisabled: true,\n                    userBooked: false,\n                },\n            ];\n        }\n\n        return timeSlots;\n    };\n\n\n    // Function to handle day press in the calendar\n    const handleDayPress = (day) => {\n        setFirstLoad(false);\n        setSelectedDate(day.dateString);\n        setSelectedTime(null); // Clear selected time when a new date is chosen\n        setStartTime(null);\n        setEndTime(null);\n        setCurrentDate(new Date(day.dateString)); // Update the current date\n\n        // Fetch and filter schedules for \"To Buy\"\n        const userBuySchedules = userSlots.filter((schedule) => {\n            // Filter schedules for \"To Buy\" based on date\n            return schedule.meetupDate === day.dateString;\n        });\n        setUserBuySchedules(userBuySchedules);\n\n        // Fetch and filter schedules for \"To Sell\"\n        const sellerSellSchedules = sellerSlots.filter((schedule) => {\n            // Filter schedules for \"To Sell\" based on date\n            return schedule.meetupDate === day.dateString;\n        });\n        setSellerSellSchedules(sellerSellSchedules);\n    };\n\n    const formatDate = (dateString) => {\n        const options = {day: '2-digit', month: 'long', year: 'numeric'};\n        return new Date(dateString).toLocaleDateString(undefined, options);\n    };\n\n    const handleSubmit = async () => {\n\n        console.log('scheduleId Here: ', scheduleId)\n\n        if (!selectedDate || !selectedTime) {\n            // Check if all fields are filled\n            Alert.alert('Incomplete Information', 'Please select a date, start time, and end time.');\n            return;\n        }\n\n        // Create the viewing availability object to be submitted\n        const scheduleData = {\n            meetupDate: selectedDate,\n            meetupTime: selectedSchedule.toLocaleTimeString('en-US', {\n                hour: '2-digit',\n                minute: '2-digit',\n                hour12: false\n            }),\n            userId: userId,\n            propertyId: propertyListingId,\n        };\n\n        // Call the API to create or update the viewing availability\n        let response;\n\n        if (isToBeUpdated === false) {\n            response = await createSchedule(scheduleData);\n            if (response.success) {\n                Alert.alert('Success', 'Schedule booked successfully.');\n                setSelectedTime(null);\n                setSelectedDate(selectedDate);\n            } else {\n                Alert.alert('Error', 'Failed to book. Please try again later.');\n            }\n        } else {\n            response = await updateSchedule(scheduleData, userId, selectedDate);\n            if (response.success) {\n                Alert.alert('Success', 'Schedule updated successfully.');\n                setSelectedTime(null);\n                setSelectedDate(selectedDate);\n            } else {\n                Alert.alert('Error', 'Failed to update. Please try again later.');\n            }\n        }\n\n        setTimeSlots(generateTimeSlots());\n        setRefreshFlatList((prev) => !prev);\n        fetchScheduleData();\n        fetchScheduleByUser();\n    };\n\n    const handleRemove = async () => {\n        console.log('scheduleId: ', scheduleId)\n        if (scheduleId) {\n            const response = await removeSchedule(scheduleId);\n            if (response.success) {\n                // Show a success alert\n                Alert.alert('Success', 'Availability successfully removed.');\n\n                // Clear selected time and time range\n                setSelectedTime(null);\n                setScheduleId(null);\n                setIsToBeUpdated(false);\n\n                // Refresh the screen to reflect the new date\n                // setSelectedDate(new Date());\n            } else {\n                Alert.alert('Error', 'Failed to remove availability. Please try again later.');\n                console.log('Error:', response.message);\n            }\n        } else {\n            Alert.alert('No Availability to Remove', 'There is no availability to remove for the selected date.');\n        }\n\n        fetchScheduleData();\n        fetchScheduleByUser();\n    };\n\n    const getMarkedDates = () => {\n        const markedDates = {};\n        const seller = {key: 'seller', color: 'red'};\n        const buyer = {key: 'buyer', color: 'green'};\n\n        if (userSlots.length === 0 || sellerSlots.length === 0) {\n            markedDates[selectedDate] = {selected: true, selectedDotColor: 'blue'};\n        }\n\n        // Loop through the data and mark the dates\n        userSlots.forEach((userSlot) => {\n            const date = userSlot.meetupDate; // Get the date from the fetched data\n\n            if (!markedDates[date]) {\n                markedDates[date] = {dots: []};\n            }\n            markedDates[date].dots.push(buyer);\n\n            if (date === selectedDate) {\n                markedDates[date].selected = true;\n                markedDates[date].selectedDotColor = 'blue';\n            }\n        });\n\n        sellerSlots.forEach((availability) => {\n            const date = availability.meetupDate; // Get the date from the fetched data\n\n            if (!markedDates[date]) {\n                markedDates[date] = {dots: []};\n            }\n            markedDates[date].dots.push(seller);\n\n            if (date === selectedDate) {\n                markedDates[date].selected = true;\n                markedDates[date].selectedDotColor = 'blue';\n            }\n        });\n\n        return markedDates;\n    };\n\n\n    return (\n        <View style={styles.container}>\n            <ScrollView\n                style={styles.scrollView}\n                contentContainerStyle={styles.scrollViewContent}\n                keyboardShouldPersistTaps=\"handled\" // Add this prop\n            >\n                <View style={styles.headerContainer}>\n                    <Text style={styles.header}>Appointments</Text>\n                </View>\n                <View style={styles.calendarContainer}>\n                    <Calendar\n                        onDayPress={handleDayPress}\n                        minDate={new Date()}\n                        markingType={'multi-dot'}\n                        style={{\n                            borderWidth: 0.5,\n                            borderColor: 'gray',\n                            height: 360,\n                        }}\n                        theme={{\n                            backgroundColor: '#ffffff',\n                            calendarBackground: '#ffffff',\n                            textSectionTitleColor: '#b6c1cd',\n                            selectedDayBackgroundColor: '#00adf5',\n                            selectedDayTextColor: '#ffffff',\n                            todayTextColor: '#00adf5',\n                            dayTextColor: '#2d4150',\n                            textDisabledColor: '#d9e1e8',\n                        }}\n                        markedDates={getMarkedDates()}\n                    />\n                </View>\n\n                {/* Time Slots Matrix (Bottom Half) */}\n\n                <View style={styles.timeSlotsContainer}>\n                    <Text style={styles.dateOnContainer}>{formatDate(selectedDate)}</Text>\n                </View>\n\n\n                {![\"LAWYER\", \"CONTRACTOR\", \"PROPERTY AGENT\"].includes(user.user.userType) ? (\n                    <>\n                        <View style={styles.bookingContainer}>\n                            <Text style={styles.dateOnContainer}>To Buy - Upcoming To View</Text>\n\n                            {/* List of user's bookings */}\n                            {userBuySchedules && userBuySchedules.length > 0 ? (\n                                <FlatList\n                                    data={userBuySchedules}\n                                    keyExtractor={(item) => item.scheduleId.toString()}\n                                    renderItem={({item}) => (\n                                        <AppointmentCard schedule={item} propertyId={item.propertyId} onPress={() => {\n                                            navigation.navigate('View Appointment Detail', {\n                                                userId: item.sellerId,\n                                                propertyId: item.propertyId,\n                                                schedule: item\n                                            });\n                                        }}/>\n                                    )}\n                                />\n                            ) : (\n                                <Text style={styles.noAvailabilityText}>No bookings found.</Text>\n                            )}\n                        </View>\n                        <View style={styles.bookingContainer}>\n                            <Text style={styles.dateOnContainer}>To Sell - Buyers To View Unit</Text>\n\n                            {/* List of user's bookings */}\n                            {sellerSellSchedules && sellerSellSchedules.length > 0 ? (\n                                <FlatList\n                                    data={sellerSellSchedules}\n                                    keyExtractor={(item) => item.scheduleId.toString()}\n                                    renderItem={({item}) => (\n                                        <AppointmentCard schedule={item} propertyId={item.propertyId} onPress={() => {\n                                            navigation.navigate('View Appointment Detail', {\n                                                userId: sellerUserId,\n                                                propertyId: item.propertyId,\n                                                schedule: item\n                                            });\n                                        }}/>\n                                    )}\n                                />\n                            ) : (\n                                <Text style={styles.noAvailabilityText}>No bookings for units listed.</Text>\n                            )}\n                        </View>\n                    </>) : (\n                    <>\n                        <View style={styles.bookingContainer}>\n                            <Text style={styles.dateOnContainer}>Request Schedule - Upcoming </Text>\n\n                            {/* List of user's bookings */}\n                            {userBuySchedules && userBuySchedules.length > 0 ? (\n                                <FlatList\n                                    data={userBuySchedules}\n                                    keyExtractor={(item) => item.scheduleId.toString()}\n                                    renderItem={({item}) => (\n                                        <AppointmentCard schedule={item} propertyId={item.propertyId} onPress={() => {\n                                            navigation.navigate('View Appointment Detail', {\n                                                userId: item.sellerId,\n                                                propertyId: item.propertyId,\n                                                schedule: item\n                                            });\n                                        }}/>\n                                    )}\n                                />\n                            ) : (\n                                <Text style={styles.noAvailabilityText}>No bookings found.</Text>\n                            )}\n                        </View>\n                    </>\n                )}\n            </ScrollView>\n        </View>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: 'white',\n        padding: 16,\n    },\n    calendarContainer: {\n        flex: 1,\n        borderRadius: 8,\n        padding: 0,\n        marginBottom: 10,\n    },\n    timeSlotsContainer: {\n        flex: 1,\n        backgroundColor: 'white',\n        borderRadius: 8,\n        padding: 16,\n        borderWidth: 0.2,\n        borderColor: 'gray',\n    },\n    timeSlot: {\n        flex: 1,\n        padding: 8,\n        borderWidth: 1,\n        borderColor: 'gray',\n        borderRadius: 4,\n        marginBottom: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n        margin: 4,\n        minHeight: 40,\n    },\n    selectedTimeSlot: {\n        backgroundColor: 'cyan',\n    },\n    timeText: {\n        fontSize: 16,\n    },\n    dateOnContainer: {\n        fontSize: 20,\n        fontWeight: 'bold',\n        marginLeft: 5,\n    },\n    headerContainer: {\n        marginBottom: 20,\n    },\n    header: {\n        fontSize: 25,\n        fontWeight: 'bold',\n        marginTop: 5,\n        textAlign: 'center',\n    },\n    saveChangesButton: {\n        backgroundColor: 'green',\n        padding: 10,\n        borderRadius: 5,\n        marginTop: 10,\n        alignItems: 'center',\n        flexDirection: 'row',\n        justifyContent: 'center',\n        width: '60%',\n        marginRight: 40,\n        marginLeft: 0,\n    },\n    saveChangesButtonText: {\n        color: 'white',\n        marginLeft: 10,\n    },\n    timePickers: {\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n    },\n    backButton: {\n        padding: 10,\n        marginRight: 20,\n    },\n    buttonContainer: {\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        marginTop: 10,\n    },\n    removeButton: {\n        backgroundColor: 'red',\n        padding: 10,\n        borderRadius: 5,\n        marginTop: 10,\n        // alignItems: 'center',\n        flexDirection: 'row',\n        justifyContent: 'center',\n        width: 50,\n        marginLeft: 50,\n        // flex: 1,\n    },\n    removeButtonText: {\n        color: 'white',\n        marginLeft: 10,\n    },\n    noAvailabilityText: {\n        fontSize: 16,\n        textAlign: 'center',\n        marginTop: 10,\n    },\n    bookingContainer: {\n        flex: 1,\n        marginTop: 10,\n        backgroundColor: 'white',\n        borderRadius: 8,\n        padding: 16,\n        borderWidth: 0.2,\n        borderColor: 'gray',\n        marginBottom: 10,\n    },\n    bookingItem: {\n        marginTop: 10,\n        borderWidth: 1,\n        borderColor: 'lightgray',\n        borderRadius: 8,\n        padding: 16,\n        marginBottom: 10,\n        backgroundColor: 'white',\n    },\n    bookingItemText: {\n        fontSize: 16,\n        marginBottom: 8,\n    },\n    bookingItemTextLabel: {\n        fontSize: 16,\n        marginBottom: 8,\n        fontWeight: 'bold',\n    },\n\n});\n\nexport default Appointments;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}