{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { BarChart } from \"react-native-chart-kit\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var MyBarChart = function MyBarChart(_ref) {\n  var monthTransactions = _ref.monthTransactions,\n    navigation = _ref.navigation;\n  var labels = monthTransactions.length !== 0 ? monthTransactions.map(function (item) {\n    return monthDigitToString(item.month);\n  }) : [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"June\"];\n  var dataPoints = monthTransactions.length !== 0 ? monthTransactions.map(function (item) {\n    return item.transactionCount;\n  }) : [0, 0, 0, 0, 0, 0];\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    showRecommendation = _useState2[0],\n    setShowRecommendation = _useState2[1];\n  var slideAnim = useRef(new Animated.Value(0)).current;\n  function monthDigitToString(monthDigit) {\n    var monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"June\", \"July\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"];\n    if (monthDigit < 1 || monthDigit > 12) {\n      throw new Error(\"Invalid month digit. It should be between 1 and 12.\");\n    }\n    return monthNames[monthDigit - 1];\n  }\n  var lastMonthTransaction = monthTransactions[1];\n  var currentMonthTransaction = monthTransactions[0];\n  useEffect(function () {\n    if (lastMonthTransaction && currentMonthTransaction && lastMonthTransaction.transactionCount > currentMonthTransaction.transactionCount) {\n      setShowRecommendation(true);\n    } else {\n      setShowRecommendation(false);\n    }\n  }, [monthTransactions]);\n  useEffect(function () {\n    Animated.spring(slideAnim, {\n      toValue: 70,\n      tension: 5,\n      friction: 3,\n      useNativeDriver: false\n    }).start();\n  }, [showRecommendation]);\n  return _jsxs(_Fragment, {\n    children: [_jsx(BarChart, {\n      data: {\n        labels: labels,\n        datasets: [{\n          data: dataPoints\n        }]\n      },\n      width: Dimensions.get('window').width - 16,\n      height: 220,\n      chartConfig: {\n        backgroundColor: '#e26a00',\n        backgroundGradientFrom: '#fb8c00',\n        backgroundGradientTo: '#ffa726',\n        decimalPlaces: 2,\n        color: function color() {\n          var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n          return `rgba(255, 255, 255, ${opacity})`;\n        },\n        labelColor: function labelColor() {\n          var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n          return `rgba(255, 255, 255, ${opacity})`;\n        },\n        style: {\n          borderRadius: 16\n        },\n        barPercentage: 0.5\n      },\n      showValuesOnTopOfBars: true,\n      style: {\n        marginVertical: 8,\n        borderRadius: 16\n      }\n    }), showRecommendation ? _jsx(TouchableOpacity, {\n      onPress: function onPress() {\n        return navigation.navigate(\"Boost Listing\");\n      },\n      children: _jsx(Animated.View, {\n        style: {\n          height: slideAnim,\n          padding: 10,\n          backgroundColor: '#ffa726',\n          borderRadius: 10,\n          alignItems: 'center',\n          justifyContent: 'center'\n        },\n        children: _jsx(Text, {\n          style: {\n            color: 'white',\n            fontSize: 16\n          },\n          children: \"Your transactions this month are lower than last month. Consider buying a boost!\"\n        })\n      })\n    }) : _jsx(Animated.View, {\n      style: {\n        height: slideAnim,\n        padding: 10,\n        backgroundColor: '#ffa726',\n        borderRadius: 10,\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      children: _jsx(Text, {\n        style: {\n          color: 'white',\n          fontSize: 16\n        },\n        children: \"Amazing, you have as much as or more transactions then the last month! Good job!\"\n      })\n    })]\n  });\n};","map":{"version":3,"names":["BarChart","Animated","Dimensions","Text","TouchableOpacity","React","useEffect","useRef","useState","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","MyBarChart","_ref","monthTransactions","navigation","labels","length","map","item","monthDigitToString","month","dataPoints","transactionCount","_useState","_useState2","_slicedToArray","showRecommendation","setShowRecommendation","slideAnim","Value","current","monthDigit","monthNames","Error","lastMonthTransaction","currentMonthTransaction","spring","toValue","tension","friction","useNativeDriver","start","children","data","datasets","width","get","height","chartConfig","backgroundColor","backgroundGradientFrom","backgroundGradientTo","decimalPlaces","color","opacity","arguments","undefined","labelColor","style","borderRadius","barPercentage","showValuesOnTopOfBars","marginVertical","onPress","navigate","View","padding","alignItems","justifyContent","fontSize"],"sources":["/Users/kathleen/Documents/IS4103Capstone/PropertyGo/frontend/mobile/components/Partner/BarChart.js"],"sourcesContent":["import {BarChart} from \"react-native-chart-kit\";\nimport {Animated, Dimensions, Text, TouchableOpacity} from \"react-native\";\nimport React, {useEffect, useRef, useState} from \"react\";\n\nexport const MyBarChart = ({monthTransactions, navigation}) => {\n    // Need to read the data from the transactions.\n    // I need to use the summary data for each month.\n    const labels = monthTransactions.length !== 0 ? monthTransactions.map(item => monthDigitToString(item.month)) : [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"June\"];\n    const dataPoints = monthTransactions.length !== 0 ? monthTransactions.map(item => item.transactionCount) : [0, 0, 0, 0, 0, 0];\n    const [showRecommendation, setShowRecommendation] = useState(false);\n    const slideAnim = useRef(new Animated.Value(0)).current;  // Initial position off-screen\n    function monthDigitToString(monthDigit) {\n        const monthNames = [\n            \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"June\",\n            \"July\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"\n        ];\n        // Check if the month digit is valid (between 1 and 12)\n        if (monthDigit < 1 || monthDigit > 12) {\n            throw new Error(\"Invalid month digit. It should be between 1 and 12.\");\n        }\n        // Return the month name. Subtract 1 because arrays are 0-indexed.\n        return monthNames[monthDigit - 1];\n    }\n\n    const lastMonthTransaction = monthTransactions[1];\n    const currentMonthTransaction = monthTransactions[0];\n\n    useEffect(() => {\n        if (lastMonthTransaction && currentMonthTransaction &&\n            lastMonthTransaction.transactionCount > currentMonthTransaction.transactionCount) {\n            setShowRecommendation(true);\n        } else {\n            setShowRecommendation(false);\n        }\n    }, [monthTransactions]);\n\n    useEffect(() => {\n        Animated.spring(slideAnim, {\n            toValue: 70,\n            tension: 5,\n            friction: 3,\n            useNativeDriver: false\n        }).start();\n    }, [showRecommendation]);\n\n    return (\n        <>\n            <BarChart\n                data={{\n                    labels: labels,\n                    datasets: [{\n                        data: dataPoints,\n                    }]\n                }}\n                width={Dimensions.get('window').width - 16}  // from react-native\n                height={220}\n                chartConfig={{\n                    backgroundColor: '#e26a00',\n                    backgroundGradientFrom: '#fb8c00',\n                    backgroundGradientTo: '#ffa726',\n                    decimalPlaces: 2,  // optional, defaults to 2dp\n                    color: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,\n                    labelColor: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,\n                    style: {\n                        borderRadius: 16\n                    },\n                    barPercentage: 0.5,\n                }}\n                showValuesOnTopOfBars\n                style={{\n                    marginVertical: 8,\n                    borderRadius: 16\n                }}\n            />\n\n            {showRecommendation ? (\n                <TouchableOpacity onPress={() => navigation.navigate(\"Boost Listing\")}>\n                    <Animated.View style={{\n                        height: slideAnim,\n                        padding: 10,\n                        backgroundColor: '#ffa726',\n                        borderRadius: 10,\n                        alignItems: 'center',\n                        justifyContent: 'center',\n                    }}>\n                        <Text style={{color: 'white', fontSize: 16}}>\n                            Your transactions this month are lower than last month. Consider buying a boost!\n                        </Text>\n                    </Animated.View>\n                </TouchableOpacity>\n            ) : (\n                <Animated.View style={{\n                    height: slideAnim,\n                    padding: 10,\n                    backgroundColor: '#ffa726',\n                    borderRadius: 10,\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                }}>\n                    <Text style={{color: 'white', fontSize: 16}}>\n                        Amazing, you have as much as or more transactions then the last month! Good job!\n                    </Text>\n                </Animated.View>\n            )}\n        </>\n    );\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}