{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport React, { useEffect, useContext, useState, useRef } from 'react';\nimport { useNavigation } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport GetStarted from \"../screens/login/GetStarted\";\nimport LoginPortal from \"../screens/login/LoginPortal\";\nimport HomeScreen from \"../screens/login/HomeScreen\";\nimport LoginScreen from \"../screens/login/LoginScreen.js\";\nimport SignUpScreen from \"../screens/login/SignUpScreen\";\nimport SignUpSelection from \"../screens/login/SignUpSelection\";\nimport LoginSelection from \"../screens/login/LoginSelection\";\nimport SideNavigator from \"./SideNavigator\";\nimport ForumSideNavigator from \"./ForumSideNavigator\";\nimport PropertyListingsStackGroup from \"./PropertyListingsStackGroup\";\nimport SignUpScreenPartnerApp from \"../screens/login/SignUpScreenPartnerApp\";\nimport { FormDataProvider } from \"../contexts/PartnerApplicationFormDataContext\";\nimport PartnerApp from \"./PartnerApplicationNavigator\";\nimport SideNavigatorPartner from \"./SideNavigatorPartner\";\nimport IntroScreen from \"../screens/partnerApplication/InfoScreen\";\nimport CompanyInfoScreen from \"../screens/partnerApplication/CompanyInfo\";\nimport UserRoleScreen from \"../screens/partnerApplication/UserRole\";\nimport creditCardInfoScreen from \"../screens/partnerApplication/CreditCardInfoScreen\";\nimport documentSubmissionScreen from \"../screens/partnerApplication/DocumentSubmission\";\nimport Response from \"../screens/sideNavigatorBar/Response\";\nimport ResponseTopNavBar from \"../components/ContactUs/ResponseTopNavBar\";\nimport { AuthContext } from \"../AuthContext\";\nimport * as Device from 'expo-device';\nimport * as Notifications from 'expo-notifications';\nimport Constants from 'expo-constants';\nimport { io } from 'socket.io-client';\nimport configData from \"../config.json\";\nimport { savePushToken } from \"../utils/tokenApi\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar BASE_URL = configData.BASE_URL;\nvar socket = io(BASE_URL);\nNotifications.setNotificationHandler({\n  handleNotification: function () {\n    var _handleNotification = _asyncToGenerator(function* () {\n      return {\n        shouldShowAlert: true,\n        shouldPlaySound: true,\n        shouldSetBadge: false\n      };\n    });\n    function handleNotification() {\n      return _handleNotification.apply(this, arguments);\n    }\n    return handleNotification;\n  }()\n});\nfunction sendPushNotification(_x) {\n  return _sendPushNotification.apply(this, arguments);\n}\nfunction _sendPushNotification() {\n  _sendPushNotification = _asyncToGenerator(function* (notificationData) {\n    var message = {\n      to: notificationData.pushToken,\n      sound: 'default',\n      title: notificationData.title,\n      body: notificationData.body,\n      data: {\n        navigateTo: \"Activity\"\n      }\n    };\n    yield fetch('https://exp.host/--/api/v2/push/send', {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Accept-encoding': 'gzip, deflate',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(message)\n    });\n  });\n  return _sendPushNotification.apply(this, arguments);\n}\nfunction registerForPushNotificationsAsync() {\n  return _registerForPushNotificationsAsync.apply(this, arguments);\n}\nfunction _registerForPushNotificationsAsync() {\n  _registerForPushNotificationsAsync = _asyncToGenerator(function* () {\n    var token;\n    if (Platform.OS === 'android') {\n      Notifications.setNotificationChannelAsync('default', {\n        name: 'default',\n        importance: Notifications.AndroidImportance.MAX,\n        vibrationPattern: [0, 250, 250, 250],\n        lightColor: '#FF231F7C'\n      });\n    }\n    if (Device.isDevice) {\n      var _yield$Notifications$ = yield Notifications.getPermissionsAsync(),\n        existingStatus = _yield$Notifications$.status;\n      var finalStatus = existingStatus;\n      if (existingStatus !== 'granted') {\n        var _yield$Notifications$2 = yield Notifications.requestPermissionsAsync(),\n          status = _yield$Notifications$2.status;\n        finalStatus = status;\n      }\n      if (finalStatus !== 'granted') {\n        alert('Failed to get push token for push notification!');\n        return;\n      }\n      token = yield Notifications.getExpoPushTokenAsync({\n        projectId: Constants.expoConfig.extra.eas.projectId\n      });\n      console.log(token);\n    } else {\n      alert('Must use physical device for Push Notifications');\n    }\n    return token;\n  });\n  return _registerForPushNotificationsAsync.apply(this, arguments);\n}\nvar Stack = createNativeStackNavigator();\nvar LoginNavigator = function LoginNavigator() {\n  var _useContext = useContext(AuthContext),\n    user = _useContext.user;\n  var navigation = useNavigation();\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    expoPushToken = _useState2[0],\n    setExpoPushToken = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    notification = _useState4[0],\n    setNotification = _useState4[1];\n  var notificationListener = useRef();\n  var responseListener = useRef();\n  useEffect(function () {\n    registerForPushNotificationsAsync().then(function (token) {\n      return setExpoPushToken(token.data);\n    });\n    notificationListener.current = Notifications.addNotificationReceivedListener(function (notification) {\n      setNotification(notification);\n    });\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(function (response) {\n      var navigateTo = response.notification.request.content.data.navigateTo;\n      if (navigateTo) {\n        navigation.navigate(navigateTo);\n      }\n    });\n    return function () {\n      Notifications.removeNotificationSubscription(notificationListener.current);\n      Notifications.removeNotificationSubscription(responseListener.current);\n    };\n  }, []);\n  useEffect(function () {\n    console.log(\"socket\");\n    socket.on('connect', function () {\n      console.log('Connected to server');\n      console.log(\"socketID:  \", socket.id);\n    });\n    socket.on(\"userNotification\", function (data) {\n      console.log(\"Received userNewForumCommentNotification\");\n      var pushToken = data.pushToken;\n      var title = data.title;\n      var body = data.body;\n      sendPushNotification({\n        pushToken: pushToken,\n        title: title,\n        body: body\n      });\n    });\n    return function () {\n      socket.disconnect();\n      console.log(\"socket deleted\");\n    };\n  }, []);\n  useEffect(function () {\n    var updateUserPushToken = function () {\n      var _ref = _asyncToGenerator(function* () {\n        if (user) {\n          var userId = user.user.userId;\n          var pushToken = expoPushToken;\n          console.log({\n            userId: userId,\n            pushToken: pushToken\n          });\n          try {\n            yield savePushToken({\n              userId: userId,\n              pushToken: pushToken\n            });\n          } catch (error) {\n            console.error(error);\n          }\n        }\n      });\n      return function updateUserPushToken() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    updateUserPushToken();\n  }, [user]);\n  return _jsx(FormDataProvider, {\n    children: _jsxs(Stack.Navigator, {\n      children: [_jsx(Stack.Screen, {\n        name: \"Get Started\",\n        component: GetStarted\n      }), _jsx(Stack.Screen, {\n        name: \"Login Portal\",\n        component: LoginPortal\n      }), _jsx(Stack.Screen, {\n        name: \"Sign Up Screen\",\n        component: SignUpScreen\n      }), _jsx(Stack.Screen, {\n        name: \"Sign Up Screen (Partner)\",\n        component: SignUpScreenPartnerApp\n      }), _jsx(Stack.Screen, {\n        name: \"Home Screen\",\n        component: HomeScreen\n      }), _jsx(Stack.Screen, {\n        name: \"Intro to Partner App\",\n        component: IntroScreen,\n        options: {\n          headerShown: false\n        }\n      }), _jsx(Stack.Screen, {\n        name: \"Company Info\",\n        component: CompanyInfoScreen\n      }), _jsx(Stack.Screen, {\n        name: \"User Role\",\n        component: UserRoleScreen\n      }), _jsx(Stack.Screen, {\n        name: \"Credit Card Info\",\n        component: creditCardInfoScreen\n      }), _jsx(Stack.Screen, {\n        name: \"Document Submission\",\n        component: documentSubmissionScreen,\n        options: {\n          headerLeft: function headerLeft() {\n            return null;\n          }\n        }\n      }), _jsx(Stack.Screen, {\n        name: \"Login\",\n        component: LoginScreen\n      }), _jsx(Stack.Screen, {\n        name: \"Sign Up Options\",\n        component: SignUpSelection\n      }), _jsx(Stack.Screen, {\n        name: \"Login Options\",\n        component: LoginSelection\n      }), _jsx(Stack.Screen, {\n        name: \"Side Navigator\",\n        component: SideNavigator,\n        options: {\n          headerShown: false\n        }\n      }), _jsx(Stack.Screen, {\n        name: \"Forum Side Navigator\",\n        component: ForumSideNavigator,\n        options: {\n          headerShown: false\n        }\n      }), _jsx(Stack.Screen, {\n        name: \"Property Listings Stack Group\",\n        component: PropertyListingsStackGroup,\n        options: {\n          headerShown: false\n        }\n      }), _jsx(Stack.Screen, {\n        name: \"Side Navigator (Partner)\",\n        component: SideNavigatorPartner,\n        options: {\n          headerShown: false\n        }\n      }), _jsx(Stack.Screen, {\n        name: \"Response\",\n        component: Response,\n        options: {\n          header: function header() {\n            return _jsx(ResponseTopNavBar, {});\n          }\n        }\n      })]\n    })\n  });\n};\nexport default LoginNavigator;\nexport { socket };","map":{"version":3,"names":["React","useEffect","useContext","useState","useRef","useNavigation","createNativeStackNavigator","GetStarted","LoginPortal","HomeScreen","LoginScreen","SignUpScreen","SignUpSelection","LoginSelection","SideNavigator","ForumSideNavigator","PropertyListingsStackGroup","SignUpScreenPartnerApp","FormDataProvider","PartnerApp","SideNavigatorPartner","IntroScreen","CompanyInfoScreen","UserRoleScreen","creditCardInfoScreen","documentSubmissionScreen","Response","ResponseTopNavBar","AuthContext","Device","Notifications","Constants","io","configData","savePushToken","jsx","_jsx","jsxs","_jsxs","BASE_URL","socket","setNotificationHandler","handleNotification","_handleNotification","_asyncToGenerator","shouldShowAlert","shouldPlaySound","shouldSetBadge","apply","arguments","sendPushNotification","_x","_sendPushNotification","notificationData","message","to","pushToken","sound","title","body","data","navigateTo","fetch","method","headers","Accept","JSON","stringify","registerForPushNotificationsAsync","_registerForPushNotificationsAsync","token","Platform","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor","isDevice","_yield$Notifications$","getPermissionsAsync","existingStatus","status","finalStatus","_yield$Notifications$2","requestPermissionsAsync","alert","getExpoPushTokenAsync","projectId","expoConfig","extra","eas","console","log","Stack","LoginNavigator","_useContext","user","navigation","_useState","_useState2","_slicedToArray","expoPushToken","setExpoPushToken","_useState3","_useState4","notification","setNotification","notificationListener","responseListener","then","current","addNotificationReceivedListener","addNotificationResponseReceivedListener","response","request","content","navigate","removeNotificationSubscription","on","id","disconnect","updateUserPushToken","_ref","userId","error","children","Navigator","Screen","component","options","headerShown","headerLeft","header"],"sources":["/Users/limzhongzhi/WebstormProjects/PropertyGo/frontend/mobile/navigations/LoginNavigator.js"],"sourcesContent":["import React, { useEffect, useContext, useState, useRef } from 'react';\nimport { useNavigation } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport GetStarted from '../screens/login/GetStarted';\nimport LoginPortal from '../screens/login/LoginPortal';\nimport HomeScreen from '../screens/login/HomeScreen';\nimport LoginScreen from '../screens/login/LoginScreen.js';\nimport SignUpScreen from '../screens/login/SignUpScreen';\nimport SignUpSelection from '../screens/login/SignUpSelection';\nimport LoginSelection from '../screens/login/LoginSelection';\nimport SideNavigator from './SideNavigator'\nimport ForumSideNavigator from './ForumSideNavigator';\nimport PropertyListingsStackGroup from './PropertyListingsStackGroup';\nimport SignUpScreenPartnerApp from \"../screens/login/SignUpScreenPartnerApp\";\nimport { FormDataProvider } from \"../contexts/PartnerApplicationFormDataContext\";\nimport PartnerApp from \"./PartnerApplicationNavigator\";\nimport SideNavigatorPartner from \"./SideNavigatorPartner\";\nimport IntroScreen from \"../screens/partnerApplication/InfoScreen\";\nimport CompanyInfoScreen from \"../screens/partnerApplication/CompanyInfo\";\nimport UserRoleScreen from \"../screens/partnerApplication/UserRole\";\nimport creditCardInfoScreen from \"../screens/partnerApplication/CreditCardInfoScreen\";\nimport documentSubmissionScreen from \"../screens/partnerApplication/DocumentSubmission\";\nimport Response from '../screens/sideNavigatorBar/Response';\nimport ResponseTopNavBar from '../components/ContactUs/ResponseTopNavBar';\n\nimport { AuthContext } from '../AuthContext';\nimport * as Device from 'expo-device';\nimport * as Notifications from 'expo-notifications';\nimport Constants from 'expo-constants';\nimport { io } from 'socket.io-client';\nimport configData from \"../config.json\"\nimport { savePushToken } from '../utils/tokenApi';\n\nconst BASE_URL = configData.BASE_URL;\n\nconst socket = io(BASE_URL);\n\nNotifications.setNotificationHandler({\n    handleNotification: async () => ({\n        shouldShowAlert: true,\n        shouldPlaySound: true,\n        shouldSetBadge: false,\n    }),\n});\n\n// Can use this function below or use Expo's Push Notification Tool from: https://expo.dev/notifications\nasync function sendPushNotification(notificationData) {\n    const message = {\n        to: notificationData.pushToken,\n        sound: 'default',\n        title: notificationData.title,\n        body: notificationData.body,\n        data: {\n            navigateTo: \"Activity\", // Add the navigation destination here\n            // someData: 'goes here',\n        },\n    };\n\n    await fetch('https://exp.host/--/api/v2/push/send', {\n        method: 'POST',\n        headers: {\n            Accept: 'application/json',\n            'Accept-encoding': 'gzip, deflate',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(message),\n    });\n}\n\nasync function registerForPushNotificationsAsync() {\n    let token;\n\n    if (Platform.OS === 'android') {\n        Notifications.setNotificationChannelAsync('default', {\n            name: 'default',\n            importance: Notifications.AndroidImportance.MAX,\n            vibrationPattern: [0, 250, 250, 250],\n            lightColor: '#FF231F7C',\n        });\n    }\n\n    if (Device.isDevice) {\n        const { status: existingStatus } = await Notifications.getPermissionsAsync();\n        let finalStatus = existingStatus;\n        if (existingStatus !== 'granted') {\n            const { status } = await Notifications.requestPermissionsAsync();\n            finalStatus = status;\n        }\n        if (finalStatus !== 'granted') {\n            alert('Failed to get push token for push notification!');\n            return;\n        }\n        token = await Notifications.getExpoPushTokenAsync({\n            projectId: Constants.expoConfig.extra.eas.projectId,\n        });\n        console.log(token);\n    } else {\n        alert('Must use physical device for Push Notifications');\n    }\n\n    return token;\n}\n\nconst Stack = createNativeStackNavigator();\n\n\n\nconst LoginNavigator = () => {\n    const { user } = useContext(AuthContext);\n    const navigation = useNavigation();\n    const [expoPushToken, setExpoPushToken] = useState('');\n    const [notification, setNotification] = useState(false);\n    const notificationListener = useRef();\n    const responseListener = useRef();\n    // console.log(\"rendered\", user.user.userId);\n\n\n    useEffect(() => {\n        registerForPushNotificationsAsync().then(token => setExpoPushToken(token.data));\n\n        notificationListener.current = Notifications.addNotificationReceivedListener(notification => {\n            setNotification(notification);\n        });\n\n        responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {\n            const navigateTo = response.notification.request.content.data.navigateTo;\n\n            if (navigateTo) {\n                // Navigate to the specified screen\n                navigation.navigate(navigateTo);\n            }\n        });\n\n        return () => {\n            Notifications.removeNotificationSubscription(notificationListener.current);\n            Notifications.removeNotificationSubscription(responseListener.current);\n        };\n    }, []);\n\n\n\n    useEffect(() => {\n        console.log(\"socket\")\n\n        socket.on('connect', () => {\n            console.log('Connected to server');\n            console.log(\"socketID:  \", socket.id); // This will have a value after the connection is established\n        });\n\n        socket.on(\"userNotification\", (data) => {\n            console.log(\"Received userNewForumCommentNotification\");\n            // Handle user logout event\n            const pushToken = data.pushToken;\n            const title = data.title;\n            const body = data.body;\n            // console.log(\"userNewForumCommentNotification\")\n\n            // console.log({pushToken,title,body})\n            sendPushNotification({ pushToken, title, body });\n        });\n\n        return () => {\n            socket.disconnect();\n            console.log(\"socket deleted\")\n        };\n    }, []);\n\n    useEffect(() => {\n        const updateUserPushToken = async () => {\n            if (user) {\n                const userId = user.user.userId;\n                const pushToken = expoPushToken;\n                console.log({ userId, pushToken });\n\n                try {\n                    await savePushToken({ userId, pushToken });\n                } catch (error) {\n                    console.error(error);\n                }\n            }\n        };\n\n        updateUserPushToken();\n        // console.log(\"LOGIN NAV: \", user);\n    }, [user]);\n\n    return (\n        <FormDataProvider>\n            <Stack.Navigator>\n                {/* <Stack.Screen name=\"Home Page\" component={HomePage} /> */}\n                {/* <Stack.Screen name=\"Google Sign Up\" component={GoogleSignUp} /> */}\n                <Stack.Screen name=\"Get Started\" component={GetStarted} />\n                <Stack.Screen name=\"Login Portal\" component={LoginPortal} />\n                <Stack.Screen name=\"Sign Up Screen\" component={SignUpScreen} />\n                <Stack.Screen name={\"Sign Up Screen (Partner)\"} component={SignUpScreenPartnerApp} />\n                <Stack.Screen name=\"Home Screen\" component={HomeScreen} />\n                <Stack.Screen name=\"Intro to Partner App\" component={IntroScreen} options={{ headerShown: false }} />\n                <Stack.Screen name=\"Company Info\" component={CompanyInfoScreen} />\n                <Stack.Screen name=\"User Role\" component={UserRoleScreen} />\n                <Stack.Screen name=\"Credit Card Info\" component={creditCardInfoScreen} />\n                <Stack.Screen name=\"Document Submission\" component={documentSubmissionScreen} options={{\n                    headerLeft: () => null,\n                }} />\n                <Stack.Screen name=\"Login\" component={LoginScreen} />\n                <Stack.Screen name=\"Sign Up Options\" component={SignUpSelection} />\n                <Stack.Screen name=\"Login Options\" component={LoginSelection} />\n                {/* <Stack.Screen name=\"Home Page\" component={HomePage} /> */}\n                <Stack.Screen\n                    name=\"Side Navigator\"\n                    component={SideNavigator}\n                    options={{ headerShown: false }}\n                />\n                <Stack.Screen\n                    name=\"Forum Side Navigator\"\n                    component={ForumSideNavigator}\n                    options={{ headerShown: false }}\n                />\n                <Stack.Screen\n                    name=\"Property Listings Stack Group\"\n                    component={PropertyListingsStackGroup}\n                    options={{ headerShown: false }}\n                />\n                <Stack.Screen\n                    name={\"Side Navigator (Partner)\"}\n                    component={SideNavigatorPartner}\n                    options={{ headerShown: false }}\n                />\n                <Stack.Screen\n                    name={\"Response\"}\n                    component={Response}\n                    options={{ header: () => <ResponseTopNavBar/> }}\n                />\n\n\n            </Stack.Navigator>\n        </FormDataProvider>\n    );\n};\n\nexport default LoginNavigator;\n\nexport { socket }; "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}