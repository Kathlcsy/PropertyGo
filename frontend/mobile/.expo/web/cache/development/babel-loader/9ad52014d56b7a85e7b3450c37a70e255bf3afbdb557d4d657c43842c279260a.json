{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { Ionicons } from '@expo/vector-icons';\nimport * as Animatable from 'react-native-animatable';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ScheduleCard = function ScheduleCard(_ref) {\n  var schedule = _ref.schedule,\n    _onPress = _ref.onPress;\n  var _useState = useState('blue'),\n    _useState2 = _slicedToArray(_useState, 2),\n    currentColor = _useState2[0],\n    setCurrentColor = _useState2[1];\n  var colors = ['red', 'green', 'blue', 'orange'];\n  var animationDuration = 1000;\n  useEffect(function () {\n    var colorChangeTimer = setInterval(function () {\n      var nextColorIndex = (colors.indexOf(currentColor) + 1) % colors.length;\n      var nextColor = colors[nextColorIndex];\n      setCurrentColor(nextColor);\n    }, animationDuration);\n    return function () {\n      return clearInterval(colorChangeTimer);\n    };\n  }, [currentColor]);\n  return _jsx(TouchableOpacity, {\n    style: styles.card,\n    onPress: function onPress() {\n      return _onPress(schedule.scheduleId);\n    },\n    children: _jsxs(View, {\n      style: styles.scheduleDetails,\n      children: [_jsxs(View, {\n        style: {\n          flexDirection: 'row',\n          alignItems: 'center'\n        },\n        children: [_jsx(Ionicons, {\n          name: \"calendar-outline\",\n          size: 24,\n          color: \"black\",\n          style: {\n            marginRight: 4\n          }\n        }), _jsx(Text, {\n          style: styles.scheduleDate,\n          children: schedule.meetupDate\n        })]\n      }), _jsxs(View, {\n        style: {\n          flexDirection: 'row',\n          alignItems: 'center'\n        },\n        children: [_jsx(Ionicons, {\n          name: \"time-outline\",\n          size: 24,\n          color: \"black\",\n          style: {\n            marginRight: 4\n          }\n        }), _jsx(Text, {\n          style: styles.scheduleTime,\n          children: schedule.meetupTime\n        })]\n      })]\n    })\n  });\n};\nvar styles = StyleSheet.create({\n  card: {\n    backgroundColor: '#fff',\n    alignSelf: 'center',\n    marginVertical: 10,\n    borderRadius: 10,\n    borderWidth: 0.5,\n    borderColor: '#ddd',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 5\n    },\n    shadowOpacity: 0.3,\n    shadowRadius: 4.65,\n    elevation: 7,\n    width: Dimensions.get('window').width * 0.8\n  },\n  scheduleDetails: {\n    padding: 10,\n    justifyContent: 'space-between'\n  },\n  scheduleDate: {\n    fontSize: 16,\n    color: '#333',\n    marginLeft: 8\n  },\n  scheduleTime: {\n    fontSize: 16,\n    color: '#333',\n    marginLeft: 8\n  }\n});\nexport default ScheduleCard;","map":{"version":3,"names":["React","useState","useEffect","View","Text","TouchableOpacity","StyleSheet","Dimensions","Ionicons","Animatable","jsx","_jsx","jsxs","_jsxs","ScheduleCard","_ref","schedule","onPress","_useState","_useState2","_slicedToArray","currentColor","setCurrentColor","colors","animationDuration","colorChangeTimer","setInterval","nextColorIndex","indexOf","length","nextColor","clearInterval","style","styles","card","scheduleId","children","scheduleDetails","flexDirection","alignItems","name","size","color","marginRight","scheduleDate","meetupDate","scheduleTime","meetupTime","create","backgroundColor","alignSelf","marginVertical","borderRadius","borderWidth","borderColor","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","get","padding","justifyContent","fontSize","marginLeft"],"sources":["/Users/limzhongzhi/WebstormProjects/PropertyGo/frontend/mobile/screens/schedule/ScheduleCard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n    View,\n    Text,\n    TouchableOpacity,\n    StyleSheet,\n    Dimensions,\n} from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport * as Animatable from 'react-native-animatable';\n\nconst ScheduleCard = ({ schedule, onPress }) => {\n    const [currentColor, setCurrentColor] = useState('blue'); // Initial color\n    const colors = ['red', 'green', 'blue', 'orange']; // Define your desired colors\n    const animationDuration = 1000; // Duration for each color change (in milliseconds)\n\n    useEffect(() => {\n        // Create a timer to change the color at regular intervals\n        const colorChangeTimer = setInterval(() => {\n            // Get the next color in the array\n            const nextColorIndex = (colors.indexOf(currentColor) + 1) % colors.length;\n            const nextColor = colors[nextColorIndex];\n            setCurrentColor(nextColor);\n        }, animationDuration);\n\n        // Clear the timer when the component unmounts\n        return () => clearInterval(colorChangeTimer);\n    }, [currentColor]);\n\n    return (\n        <TouchableOpacity style={styles.card} onPress={() => onPress(schedule.scheduleId)}>\n            <View style={styles.scheduleDetails}>\n                <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n                    <Ionicons name=\"calendar-outline\" size={24} color=\"black\" style={{ marginRight: 4 }} />\n                    <Text style={styles.scheduleDate}>{schedule.meetupDate}</Text>\n                </View>\n                <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n                    <Ionicons name=\"time-outline\" size={24} color=\"black\" style={{ marginRight: 4 }} />\n                    <Text style={styles.scheduleTime}>{schedule.meetupTime}</Text>\n                </View>\n                {/* Add more schedule details if needed */}\n            </View>\n        </TouchableOpacity>\n    );\n};\n\nconst styles = StyleSheet.create({\n    card: {\n        backgroundColor: '#fff',\n        alignSelf: 'center', // Center the card\n        marginVertical: 10, // A little margin top and bottom for spacing between cards\n        borderRadius: 10,\n        borderWidth: 0.5, // Light border\n        borderColor: '#ddd', // Light gray color\n        shadowColor: '#000',\n        shadowOffset: {\n            width: 0,\n            height: 5,\n        },\n        shadowOpacity: 0.3,\n        shadowRadius: 4.65,\n        elevation: 7,\n        width: Dimensions.get('window').width * 0.8,\n    },\n    scheduleDetails: {\n        padding: 10,\n        justifyContent: 'space-between',\n    },\n    scheduleDate: {\n        fontSize: 16,\n        color: '#333',\n        marginLeft: 8,\n    },\n    scheduleTime: {\n        fontSize: 16,\n        color: '#333',\n        marginLeft: 8,\n    },\n});\n\nexport default ScheduleCard;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}