{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { BASE_URL } from \"./documentApi\";\nexport var fetchPartnerByRangeAndType = function () {\n  var _ref = _asyncToGenerator(function* (USER_TYPE, START, END) {\n    try {\n      var res = yield fetch(`${BASE_URL}/user/partners/${USER_TYPE}/${START}/${END}`);\n      var results = yield res.json();\n      return results;\n    } catch (error) {\n      console.error(\"Fetch partners failed: \", error);\n    }\n  });\n  return function fetchPartnerByRangeAndType(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var editUserBoost = function () {\n  var _ref2 = _asyncToGenerator(function* (USER_ID, userData) {\n    try {\n      var response = yield fetch(`${BASE_URL}/user/${USER_ID}/boost`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n      });\n      if (response.ok) {\n        var data = yield response.json();\n        return {\n          success: true,\n          data: data\n        };\n      } else {\n        var errorData = yield response.json();\n        return {\n          success: false,\n          message: errorData.message\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  });\n  return function editUserBoost(_x4, _x5) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var uploadCompanyPhotos = function () {\n  var _ref3 = _asyncToGenerator(function* (USER_ID, images) {\n    try {\n      var formData = new FormData();\n      images.forEach(function (image, index) {\n        var imageBlob = {\n          uri: image.uri,\n          type: 'image/jpeg',\n          name: `companyImage${index}.jpg`\n        };\n        formData.append(`images`, imageBlob);\n      });\n      var response = yield fetch(`${BASE_URL}/${USER_ID}/addCompanyPhotos`, {\n        method: 'POST',\n        body: formData,\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      if (response.ok) {\n        var data = yield response.json();\n        return {\n          success: true,\n          data: data\n        };\n      } else {\n        var errorData = yield response.json();\n        return {\n          success: false,\n          message: errorData.error\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  });\n  return function uploadCompanyPhotos(_x6, _x7) {\n    return _ref3.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["BASE_URL","fetchPartnerByRangeAndType","_ref","_asyncToGenerator","USER_TYPE","START","END","res","fetch","results","json","error","console","_x","_x2","_x3","apply","arguments","editUserBoost","_ref2","USER_ID","userData","response","method","headers","body","JSON","stringify","ok","data","success","errorData","message","_x4","_x5","uploadCompanyPhotos","_ref3","images","formData","FormData","forEach","image","index","imageBlob","uri","type","name","append","_x6","_x7"],"sources":["/Users/limzhongzhi/WebstormProjects/PropertyGo/frontend/mobile/utils/partnerApi.js"],"sourcesContent":["// This is the API for PartnerApp\n\nimport {BASE_URL} from \"./documentApi\";\n\nexport const fetchPartnerByRangeAndType = async(USER_TYPE, START, END) => {\n    try {\n        const res = await fetch(`${BASE_URL}/user/partners/${USER_TYPE}/${START}/${END}`)\n        const results = await res.json();\n        return results\n    } catch (error) {\n        console.error(\"Fetch partners failed: \", error)\n    }\n}\n\nexport const editUserBoost = async(USER_ID, userData) => {\n        try {\n            const response = await fetch(`${BASE_URL}/user/${USER_ID}/boost`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json', // Use JSON content type\n                },\n                body: JSON.stringify(userData), // Send propertyData as JSON string\n            });\n\n            if (response.ok) {\n                const data = await response.json();\n                return { success: true, data };\n            } else {\n                const errorData = await response.json();\n                return { success: false, message: errorData.message };\n            }\n        } catch (error) {\n            return { success: false, message: error.message };\n        }\n}\n\nexport const uploadCompanyPhotos = async(USER_ID, images) => {\n    try {\n        const formData = new FormData();\n\n        images.forEach((image, index) => {\n            const imageBlob = {\n                uri: image.uri,\n                type: 'image/jpeg',\n                name: `companyImage${index}.jpg`,\n            };\n\n            formData.append(`images`, imageBlob);\n        });\n\n        const response = await fetch(`${BASE_URL}/${USER_ID}/addCompanyPhotos`, {\n            method: 'POST',\n            body: formData,\n            headers: {\n                'Content-Type': 'multipart/form-data',\n            },\n        });\n\n        if (response.ok) {\n            const data = await response.json();\n            return {success: true, data};\n        } else {\n            const errorData = await response.json();\n            return {success: false, message: errorData.error};\n        }\n    } catch (error) {\n        return {success: false, message: error.message};\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}