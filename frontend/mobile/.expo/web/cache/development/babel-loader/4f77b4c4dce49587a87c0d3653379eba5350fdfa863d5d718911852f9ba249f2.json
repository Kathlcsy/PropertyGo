{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useContext, useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { createDrawerNavigator, DrawerContentScrollView, DrawerItemList, DrawerItem } from '@react-navigation/drawer';\nimport { Ionicons } from '@expo/vector-icons';\nimport { createDrawerScreen } from \"../components/DrawerScreen\";\nimport ForumStackGroup from \"./ForumStackGroup\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar CustomDrawerContent = function CustomDrawerContent(props) {\n  return _jsx(DrawerContentScrollView, _objectSpread(_objectSpread({}, props), {}, {\n    children: _jsx(DrawerItemList, _objectSpread({}, props))\n  }));\n};\nvar drawerScreens = [createDrawerScreen('Forum Stack Group', ForumStackGroup, \"forum\", \"Forum\")];\nvar Drawer = createDrawerNavigator();\nvar ForumSideNavigator = function ForumSideNavigator() {\n  return _jsx(Drawer.Navigator, {\n    drawerContent: function drawerContent(props) {\n      return _jsx(CustomDrawerContent, _objectSpread({}, props));\n    },\n    children: drawerScreens.map(function (screen) {\n      return _jsx(Drawer.Screen, {\n        name: screen.name,\n        component: screen.component,\n        options: screen.options\n      }, screen.name);\n    })\n  });\n};\nexport default ForumSideNavigator;","map":{"version":3,"names":["React","useContext","useEffect","useState","View","Text","TouchableOpacity","Image","createDrawerNavigator","DrawerContentScrollView","DrawerItemList","DrawerItem","Ionicons","createDrawerScreen","ForumStackGroup","jsx","_jsx","CustomDrawerContent","props","_objectSpread","children","drawerScreens","Drawer","ForumSideNavigator","Navigator","drawerContent","map","screen","Screen","name","component","options"],"sources":["/Users/wayneonn/Code/PropertyGo/frontend/mobile/navigations/ForumSideNavigator.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport { View, Text, TouchableOpacity, Image } from 'react-native';\nimport {\n    createDrawerNavigator,\n    DrawerContentScrollView,\n    DrawerItemList,\n    DrawerItem\n} from '@react-navigation/drawer';\nimport { Ionicons } from '@expo/vector-icons';\nimport { createDrawerScreen } from '../components/DrawerScreen';\nimport ForumStackGroup from './ForumStackGroup';\n\nconst CustomDrawerContent = (props) => {\n    // const { navigation, user, updateUserProfilePicture } = props;\n    // const { logout } = useContext(AuthContext);\n\n    // let profileImageBase64;\n    // if (user && user.user.profileImage && user.user.profileImage.data) {\n    //     profileImageBase64 = base64.encodeFromByteArray(user.user.profileImage.data);\n    // }\n\n    // const handleLogout = () => {\n    //     logout();\n    //     navigation.navigate(\"Login Portal\");\n    // };\n\n    // const [profileImage, setProfileImage] = useState(null);\n    \n\n    // useEffect(() => {\n    //     if (profileImageBase64) {\n    //         setProfileImage(`data:image/jpeg;base64,${profileImageBase64}`);\n    //     } else {\n    //         setProfileImage(require('../assets/Default-Profile-Picture-Icon.png'));\n    //     }\n\n    //     setName(user && user.user.name ? user.user.name : '');\n    // }, [user]);\n\n    // const [name, setName] = useState(user && user.user.name ? user.user.name : '');\n\n    return (\n        <DrawerContentScrollView {...props}>\n            {/* <View style={{ alignItems: 'center', padding: 16 }}>\n                {user && user.user.profileImage ? (\n                    <Image\n                        source={{ uri: `data:image/jpeg;base64,${profileImageBase64}` }}\n                        style={{ width: 100, height: 100, borderRadius: 50 }}\n                    />\n                ) : (\n                    <Image\n                        source={require('../assets/Default-Profile-Picture-Icon.png')}\n                        style={{ width: 100, height: 100, borderRadius: 50 }}\n                    />\n                )}\n                <Text style={{ marginTop: 15, fontSize: 16, fontWeight: 'bold', color: 'black' }}>\n                    PropertyGo\n                </Text>\n                {user && user.user.name && (\n                    <Text style={{ marginTop: 5, fontSize: 16 }}>\n                        Welcome, {name}\n                    </Text>\n                )}\n            </View> */}\n\n            <DrawerItemList {...props} />\n\n            {/* <LogoutButton onPress={handleLogout} /> */}\n        </DrawerContentScrollView>\n    );\n};\n\nconst drawerScreens = [\n    createDrawerScreen('Forum Stack Group', ForumStackGroup, \"forum\" , \"Forum\"),\n];\n\nconst Drawer = createDrawerNavigator();\n\nconst ForumSideNavigator = () => {\n    // const { user } = useContext(AuthContext);\n    \n    return (\n        <Drawer.Navigator\n            drawerContent={(props) => <CustomDrawerContent {...props} />}\n            // screenOptions={() => ({\n            //     drawerActiveTintColor: \"#FFD700\",\n            //     header: () => <TopBar/>,\n                // headerShown: false,\n            // })}\n            >\n            {drawerScreens.map((screen) => (\n                <Drawer.Screen\n                    key={screen.name}\n                    name={screen.name}\n                    component={screen.component}\n                    options={screen.options}\n                />\n            ))}\n        </Drawer.Navigator>\n    );\n};\n\nexport default ForumSideNavigator;"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,gBAAA;AAAA,OAAAC,KAAA;AAE/D,SACIC,qBAAqB,EACrBC,uBAAuB,EACvBC,cAAc,EACdC,UAAU,QACP,0BAA0B;AACjC,SAASC,QAAQ,QAAQ,oBAAoB;AAC7C,SAASC,kBAAkB;AAC3B,OAAOC,eAAe;AAA0B,SAAAC,GAAA,IAAAC,IAAA;AAEhD,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAIC,KAAK,EAAK;EA6BnC,OACIF,IAAA,CAACP,uBAAuB,EAAAU,aAAA,CAAAA,aAAA,KAAKD,KAAK;IAAAE,QAAA,EAuB9BJ,IAAA,CAACN,cAAc,EAAAS,aAAA,KAAKD,KAAK,CAAG;EAAC,EAGR,CAAC;AAElC,CAAC;AAED,IAAMG,aAAa,GAAG,CAClBR,kBAAkB,CAAC,mBAAmB,EAAEC,eAAe,EAAE,OAAO,EAAG,OAAO,CAAC,CAC9E;AAED,IAAMQ,MAAM,GAAGd,qBAAqB,CAAC,CAAC;AAEtC,IAAMe,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAA,EAAS;EAG7B,OACIP,IAAA,CAACM,MAAM,CAACE,SAAS;IACbC,aAAa,EAAE,SAAAA,cAACP,KAAK;MAAA,OAAKF,IAAA,CAACC,mBAAmB,EAAAE,aAAA,KAAKD,KAAK,CAAG,CAAC;IAAA,CAAC;IAAAE,QAAA,EAO5DC,aAAa,CAACK,GAAG,CAAC,UAACC,MAAM;MAAA,OACtBX,IAAA,CAACM,MAAM,CAACM,MAAM;QAEVC,IAAI,EAAEF,MAAM,CAACE,IAAK;QAClBC,SAAS,EAAEH,MAAM,CAACG,SAAU;QAC5BC,OAAO,EAAEJ,MAAM,CAACI;MAAQ,GAHnBJ,MAAM,CAACE,IAIf,CAAC;IAAA,CACL;EAAC,CACY,CAAC;AAE3B,CAAC;AAED,eAAeN,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}