{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useState, useEffect, useContext } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { Calendar } from 'react-native-calendars';\nimport { Ionicons, MaterialCommunityIcons } from '@expo/vector-icons';\nimport Icon from \"@expo/vector-icons/FontAwesome\";\nimport { useNavigation } from '@react-navigation/native';\nimport { AuthContext } from \"../../../AuthContext\";\nimport DateTimePickerModal from 'react-native-modal-datetime-picker';\nimport { Picker } from '@react-native-picker/picker';\nimport { createSchedule, getScheduleByDateAndPropertyId, getScheduleBySellerId, getScheduleByUserId, removeSchedule, updateSchedule } from \"../../../utils/scheduleApi\";\nimport AppointmentCard from \"../../schedule/AppointmentCard\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar Appointments = function Appointments(_ref) {\n  var route = _ref.route;\n  var navigation = useNavigation();\n  var _useContext = useContext(AuthContext),\n    user = _useContext.user;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedTime = _useState2[0],\n    setSelectedTime = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    selectedSchedule = _useState4[0],\n    setSelectedSchedule = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    startTime = _useState6[0],\n    setStartTime = _useState6[1];\n  var _useState7 = useState(null),\n    _useState8 = _slicedToArray(_useState7, 2),\n    endTime = _useState8[0],\n    setEndTime = _useState8[1];\n  var userId = user.user.userId;\n  var userType = user.user.userType;\n  var _useState9 = useState(new Date()),\n    _useState10 = _slicedToArray(_useState9, 2),\n    selectedDate = _useState10[0],\n    setSelectedDate = _useState10[1];\n  var _useState11 = useState([]),\n    _useState12 = _slicedToArray(_useState11, 2),\n    availability = _useState12[0],\n    setAvailability = _useState12[1];\n  var _useState13 = useState(false),\n    _useState14 = _slicedToArray(_useState13, 2),\n    isToBeUpdated = _useState14[0],\n    setIsToBeUpdated = _useState14[1];\n  var _useState15 = useState(null),\n    _useState16 = _slicedToArray(_useState15, 2),\n    viewingAvailabilityId = _useState16[0],\n    setViewingAvailabilityId = _useState16[1];\n  var _useState17 = useState(null),\n    _useState18 = _slicedToArray(_useState17, 2),\n    scheduleId = _useState18[0],\n    setScheduleId = _useState18[1];\n  var _useState19 = useState(true),\n    _useState20 = _slicedToArray(_useState19, 2),\n    firstLoad = _useState20[0],\n    setFirstLoad = _useState20[1];\n  var _useState21 = useState([]),\n    _useState22 = _slicedToArray(_useState21, 2),\n    timeSlots = _useState22[0],\n    setTimeSlots = _useState22[1];\n  var _useState23 = useState([]),\n    _useState24 = _slicedToArray(_useState23, 2),\n    takenTimeSlots = _useState24[0],\n    setTakenTimeSlots = _useState24[1];\n  var _useState25 = useState(new Date()),\n    _useState26 = _slicedToArray(_useState25, 2),\n    currentDate = _useState26[0],\n    setCurrentDate = _useState26[1];\n  var _useState27 = useState(false),\n    _useState28 = _slicedToArray(_useState27, 2),\n    refreshFlatList = _useState28[0],\n    setRefreshFlatList = _useState28[1];\n  var _useState29 = useState([]),\n    _useState30 = _slicedToArray(_useState29, 2),\n    userSlots = _useState30[0],\n    setUserSlots = _useState30[1];\n  var _useState31 = useState([]),\n    _useState32 = _slicedToArray(_useState31, 2),\n    sellerSlots = _useState32[0],\n    setSellerSlots = _useState32[1];\n  var _useState33 = useState([]),\n    _useState34 = _slicedToArray(_useState33, 2),\n    userBuySchedules = _useState34[0],\n    setUserBuySchedules = _useState34[1];\n  var _useState35 = useState([]),\n    _useState36 = _slicedToArray(_useState35, 2),\n    sellerSellSchedules = _useState36[0],\n    setSellerSellSchedules = _useState36[1];\n  var _useState37 = useState('1'),\n    _useState38 = _slicedToArray(_useState37, 2),\n    selectedTimeRange = _useState38[0],\n    setSelectedTimeRange = _useState38[1];\n  var _useState39 = useState('Tomorrow'),\n    _useState40 = _slicedToArray(_useState39, 2),\n    selectedTextDays = _useState40[0],\n    setSelectedTextDays = _useState40[1];\n  var _useState41 = useState(false),\n    _useState42 = _slicedToArray(_useState41, 2),\n    dayPickerVisible = _useState42[0],\n    setDayPickerVisible = _useState42[1];\n  var _useState43 = useState([]),\n    _useState44 = _slicedToArray(_useState43, 2),\n    filteredBuyerSchedules = _useState44[0],\n    setFilteredBuyerSchedules = _useState44[1];\n  var _useState45 = useState([]),\n    _useState46 = _slicedToArray(_useState45, 2),\n    filteredSellerSchedules = _useState46[0],\n    setFilteredSellerSchedules = _useState46[1];\n  var dayChoices = [{\n    label: 'Tomorrow',\n    value: '1'\n  }, {\n    label: 'Next 3 Days',\n    value: '3'\n  }, {\n    label: 'Next 7 Days',\n    value: '7'\n  }, {\n    label: 'Next 15 Days',\n    value: '15'\n  }, {\n    label: 'Next 30 Days',\n    value: '30'\n  }];\n  useEffect(function () {\n    fetchScheduleByUser();\n    fetchScheduleBySeller();\n  }, [selectedDate]);\n  useEffect(function () {\n    fetchScheduleByUser();\n    fetchScheduleBySeller();\n  }, [selectedTimeRange]);\n  useEffect(function () {\n    if (firstLoad) {\n      setTimeSlots(generateTimeSlots());\n      console.log(\"timeslots: \", generateTimeSlots());\n    }\n  }, []);\n  var combinedSchedules = [].concat(_toConsumableArray(filteredBuyerSchedules), _toConsumableArray(filteredSellerSchedules));\n  combinedSchedules.sort(function (a, b) {\n    var dateA = new Date(a.meetupDate);\n    var dateB = new Date(b.meetupDate);\n    if (dateA < dateB) return -1;\n    if (dateA > dateB) return 1;\n    var timeA = a.meetupTime;\n    var timeB = b.meetupTime;\n    if (timeA < timeB) return -1;\n    if (timeA > timeB) return 1;\n    return 0;\n  });\n  var fetchScheduleByUser = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      var _yield$getScheduleByU = yield getScheduleByUserId(userId),\n        success = _yield$getScheduleByU.success,\n        data = _yield$getScheduleByU.data,\n        message = _yield$getScheduleByU.message;\n      if (success) {\n        setUserSlots(data);\n        var selectedTimeRangeAsNumber = parseInt(selectedTimeRange);\n        var _currentDate = new Date();\n        var daysLater = new Date(_currentDate);\n        daysLater.setHours(0, 0, 0, 0);\n        daysLater.setDate(_currentDate.getDate() + selectedTimeRangeAsNumber);\n        var filteredSchedules = data.filter(function (schedule) {\n          var meetupDate = new Date(schedule.meetupDate);\n          meetupDate.setHours(0, 0, 0, 0);\n          return meetupDate >= _currentDate && meetupDate <= daysLater;\n        });\n        setFilteredBuyerSchedules(filteredSchedules);\n      } else {\n        setUserSlots([]);\n        console.error('Error fetching schedule data for user:', message);\n      }\n    });\n    return function fetchScheduleByUser() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var fetchScheduleBySeller = function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      var _yield$getScheduleByS = yield getScheduleBySellerId(userId),\n        success = _yield$getScheduleByS.success,\n        data = _yield$getScheduleByS.data,\n        message = _yield$getScheduleByS.message;\n      if (success) {\n        setSellerSlots(data);\n        var selectedTimeRangeAsNumber = parseInt(selectedTimeRange);\n        var _currentDate2 = new Date();\n        var daysLater = new Date(_currentDate2);\n        daysLater.setHours(0, 0, 0, 0);\n        daysLater.setDate(_currentDate2.getDate() + selectedTimeRangeAsNumber);\n        var filteredSchedules = data.filter(function (schedule) {\n          var meetupDate = new Date(schedule.meetupDate);\n          meetupDate.setHours(0, 0, 0, 0);\n          return meetupDate >= _currentDate2 && meetupDate <= daysLater;\n        });\n        setFilteredSellerSchedules(filteredSchedules);\n      } else {\n        setSellerSlots([]);\n        console.error('Error fetching schedule data for user:', message);\n      }\n    });\n    return function fetchScheduleBySeller() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var fetchScheduleData = function () {\n    var _ref4 = _asyncToGenerator(function* () {\n      var _yield$getScheduleByD = yield getScheduleByDateAndPropertyId(selectedDate, propertyListingId),\n        success = _yield$getScheduleByD.success,\n        data = _yield$getScheduleByD.data,\n        message = _yield$getScheduleByD.message;\n      if (success) {\n        setTakenTimeSlots(data);\n        setIsToBeUpdated(data.some(function (item) {\n          return item.userId === userId;\n        }));\n      } else {\n        console.error('Error fetching schedule data:', message);\n        setTakenTimeSlots([]);\n      }\n    });\n    return function fetchScheduleData() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  var convertToDateTime = function convertToDateTime(timeString) {\n    var _timeString$split = timeString.split(':'),\n      _timeString$split2 = _slicedToArray(_timeString$split, 3),\n      hours = _timeString$split2[0],\n      minutes = _timeString$split2[1],\n      seconds = _timeString$split2[2];\n    var formattedDate = new Date();\n    formattedDate.setHours(parseInt(hours, 10));\n    formattedDate.setMinutes(parseInt(minutes, 10));\n    formattedDate.setSeconds(parseInt(seconds, 10));\n    return formattedDate;\n  };\n  var handleTimeSlotSelect = function handleTimeSlotSelect(time, scheduleId) {\n    var selectedDateTime = new Date(selectedDate);\n    var _time$split = time.split(' '),\n      _time$split2 = _slicedToArray(_time$split, 2),\n      timeWithoutAmPm = _time$split2[0],\n      period = _time$split2[1];\n    var _timeWithoutAmPm$spli = timeWithoutAmPm.split(':').map(Number),\n      _timeWithoutAmPm$spli2 = _slicedToArray(_timeWithoutAmPm$spli, 2),\n      hours = _timeWithoutAmPm$spli2[0],\n      minutes = _timeWithoutAmPm$spli2[1];\n    var adjustedHours = hours;\n    if (period === 'PM' && hours !== 12) {\n      adjustedHours += 12;\n    } else if (period === 'AM' && hours === 12) {\n      adjustedHours = 0;\n    }\n    selectedDateTime.setHours(adjustedHours);\n    selectedDateTime.setMinutes(minutes);\n    setSelectedTime(time);\n    setSelectedSchedule(selectedDateTime);\n    setScheduleId(scheduleId);\n    setTimeSlots(function (prevTimeSlots) {\n      return prevTimeSlots.map(function (slot) {\n        return slot.time === time ? _objectSpread(_objectSpread({}, slot), {}, {\n          userBooked: true\n        }) : slot;\n      });\n    });\n  };\n  function convertTimeTo12HourFormat(time) {\n    var _time$split3 = time.split(':'),\n      _time$split4 = _slicedToArray(_time$split3, 3),\n      hours = _time$split4[0],\n      minutes = _time$split4[1],\n      seconds = _time$split4[2];\n    var period = 'AM';\n    var formattedHours = parseInt(hours);\n    if (formattedHours >= 12) {\n      period = 'PM';\n      if (formattedHours > 12) {\n        formattedHours -= 12;\n      }\n    }\n    return `${formattedHours}:${minutes} ${period}`;\n  }\n  var generateTimeSlots = function generateTimeSlots() {\n    console.log('generateTimeSlots() selectedDate:', selectedDate);\n    console.log('generateTimeSlots() startTime: ', startTime);\n    console.log('generateTimeSlots() endTime: ', endTime);\n    var timeSlots = [];\n    var userBookedFlag = false;\n    if (startTime && endTime) {\n      var startHour = startTime.getHours();\n      var endHour = endTime.getHours();\n      var _loop = function _loop() {\n        var hour = i % 12 || 12;\n        var ampm = i < 12 ? 'AM' : 'PM';\n        var time = `${hour}:00 ${ampm}`;\n        var isTimeSlotTaken = takenTimeSlots.some(function (takenSlot) {\n          return convertTimeTo12HourFormat(takenSlot.meetupTime) === time;\n        });\n        var userBookedSlot = takenTimeSlots.find(function (takenSlot) {\n          return takenSlot.userId === userId && convertTimeTo12HourFormat(takenSlot.meetupTime) === time;\n        });\n        var scheduleId = userBookedSlot ? userBookedSlot.scheduleId : null;\n        var isSlotDisabled = !userBookedSlot && isTimeSlotTaken;\n        timeSlots.push({\n          id: i.toString(),\n          time: time,\n          isTimeSlotTaken: isTimeSlotTaken,\n          userBooked: !!userBookedSlot,\n          isSlotDisabled: isSlotDisabled,\n          scheduleId: scheduleId\n        });\n        if (!!userBookedSlot) {\n          userBookedFlag = true;\n        }\n      };\n      for (var i = startHour; i <= endHour; i++) {\n        _loop();\n      }\n    }\n    console.log('timeSlots: ', timeSlots, \"for: \", selectedDate);\n    if (firstLoad) {\n      return [{\n        id: 'initial-load',\n        time: 'Select a time slot',\n        isSlotDisabled: true,\n        userBooked: false\n      }];\n    }\n    return timeSlots;\n  };\n  var handleDayPress = function handleDayPress(day) {\n    setFirstLoad(false);\n    setSelectedDate(day.dateString);\n    setSelectedTime(null);\n    setStartTime(null);\n    setEndTime(null);\n    setCurrentDate(new Date(day.dateString));\n    var userBuySchedules = userSlots.filter(function (schedule) {\n      return schedule.meetupDate === day.dateString;\n    });\n    setUserBuySchedules(userBuySchedules);\n    var sellerSellSchedules = sellerSlots.filter(function (schedule) {\n      return schedule.meetupDate === day.dateString;\n    });\n    setSellerSellSchedules(sellerSellSchedules);\n  };\n  var formatDate = function formatDate(dateString) {\n    var options = {\n      day: '2-digit',\n      month: 'long',\n      year: 'numeric'\n    };\n    return new Date(dateString).toLocaleDateString(undefined, options);\n  };\n  var getMarkedDates = function getMarkedDates() {\n    var markedDates = {};\n    var seller = {\n      key: 'seller',\n      color: 'red'\n    };\n    var buyer = {\n      key: 'buyer',\n      color: 'green'\n    };\n    console.log('selectedDate: ', selectedDate);\n    markedDates[selectedDate] = {\n      selected: true,\n      selectedDotColor: 'blue'\n    };\n    userSlots.forEach(function (userSlot) {\n      var date = userSlot.meetupDate;\n      markedDates[date] = {\n        dots: []\n      };\n      markedDates[date].dots.push(buyer);\n      if (date === selectedDate) {\n        markedDates[date].selected = true;\n        markedDates[date].selectedDotColor = 'blue';\n      }\n    });\n    sellerSlots.forEach(function (availability) {\n      var date = availability.meetupDate;\n      if (!markedDates[date]) {\n        markedDates[date] = {\n          dots: []\n        };\n      } else if (!markedDates[date].dots) {\n        markedDates[date].dots = [];\n      }\n      markedDates[date].dots.push(seller);\n      if (date === selectedDate) {\n        markedDates[date].selected = true;\n        markedDates[date].selectedDotColor = 'blue';\n      }\n    });\n    return markedDates;\n  };\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsxs(ScrollView, {\n      style: styles.scrollView,\n      children: [_jsx(View, {\n        style: styles.headerContainer,\n        children: _jsx(Text, {\n          style: styles.header,\n          children: \"Appointments\"\n        })\n      }), _jsx(View, {\n        style: styles.calendarContainer,\n        children: _jsx(Calendar, {\n          onDayPress: handleDayPress,\n          onMonthChange: handleDayPress,\n          minDate: new Date(),\n          markingType: 'multi-dot',\n          style: styles.calendar,\n          theme: calendarTheme,\n          markedDates: getMarkedDates()\n        })\n      }), _jsxs(View, {\n        style: styles.dateCard,\n        children: [_jsx(Ionicons, {\n          name: \"calendar\",\n          size: 28,\n          color: \"#00adf5\"\n        }), _jsx(Text, {\n          style: styles.dateText,\n          children: formatDate(selectedDate)\n        })]\n      }), _jsxs(View, {\n        style: styles.bookingContainer,\n        children: [_jsxs(Text, {\n          style: styles.sectionHeader,\n          children: [_jsx(MaterialCommunityIcons, {\n            name: \"telescope\",\n            size: 28,\n            color: \"#00adf5\"\n          }), ' ', \"To Buy - Upcoming To View\"]\n        }), userBuySchedules && userBuySchedules.length > 0 ? _jsx(_Fragment, {\n          children: userBuySchedules.map(function (item) {\n            return _jsx(AppointmentCard, {\n              schedule: item,\n              propertyId: item.propertyId,\n              onPress: function onPress() {\n                navigation.navigate('View Appointment Detail', {\n                  userId: item.userId,\n                  propertyId: item.propertyId,\n                  scheduleId: item.scheduleId\n                });\n              }\n            });\n          })\n        }) : _jsx(Text, {\n          style: styles.noAvailabilityText,\n          children: \"No bookings found.\"\n        })]\n      }), _jsxs(View, {\n        style: styles.bookingContainer,\n        children: [_jsxs(Text, {\n          style: styles.sectionHeader,\n          children: [_jsx(MaterialCommunityIcons, {\n            name: \"table-eye\",\n            size: 28,\n            color: \"#00adf5\"\n          }), ' ', \"To Sell - Buyers To View Unit\"]\n        }), sellerSellSchedules && sellerSellSchedules.length > 0 ? _jsx(_Fragment, {\n          children: sellerSellSchedules.map(function (item) {\n            return _jsx(AppointmentCard, {\n              schedule: item,\n              propertyId: item.propertyId,\n              onPress: function onPress() {\n                navigation.navigate('View Appointment Detail', {\n                  userId: item.userId,\n                  propertyId: item.propertyId,\n                  scheduleId: item.scheduleId\n                });\n              }\n            });\n          })\n        }) : _jsx(Text, {\n          style: styles.noAvailabilityText,\n          children: \"No bookings for units listed.\"\n        })]\n      }), _jsxs(View, {\n        style: styles.bookingContainer,\n        children: [_jsxs(View, {\n          style: styles.sectionHeaderContainer,\n          children: [_jsxs(Text, {\n            style: styles.sectionHeader,\n            children: [_jsx(MaterialCommunityIcons, {\n              name: \"calendar-search\",\n              size: 28,\n              color: \"#00adf5\"\n            }), ' ', \"Upcoming Days\"]\n          }), _jsxs(TouchableOpacity, {\n            style: styles.propertyTypePickerButton,\n            onPress: function onPress() {\n              return setDayPickerVisible(true);\n            },\n            children: [_jsx(Text, {\n              style: styles.propertyTypePickerText,\n              children: selectedTextDays\n            }), _jsx(Icon, {\n              name: \"caret-down\",\n              size: 20,\n              color: \"black\"\n            })]\n          })]\n        }), _jsx(Modal, {\n          transparent: true,\n          animationType: \"slide\",\n          visible: dayPickerVisible,\n          onRequestClose: function onRequestClose() {\n            return setDayPickerVisible(false);\n          },\n          children: _jsxs(View, {\n            style: styles.modalContainer,\n            children: [_jsx(Picker, {\n              selectedValue: selectedTimeRange,\n              onValueChange: function onValueChange(value) {\n                setSelectedTimeRange(value);\n                var selectedLabel = dayChoices.find(function (item) {\n                  return item.value === value;\n                });\n                if (selectedLabel) {\n                  setSelectedTextDays(selectedLabel.label);\n                }\n                console.log('selectedTimeRange: ', selectedTimeRange, \"selectedTextDays: \", selectedTextDays);\n              },\n              style: styles.picker,\n              children: dayChoices.map(function (type, index) {\n                return _jsx(Picker.Item, {\n                  label: type.label,\n                  value: type.value\n                }, index);\n              })\n            }), _jsx(View, {\n              style: styles.okButtonContainer,\n              children: _jsx(Button, {\n                title: \"OK\",\n                onPress: function onPress() {\n                  return setDayPickerVisible(false);\n                }\n              })\n            })]\n          })\n        }), combinedSchedules.length > 0 ? _jsx(_Fragment, {\n          children: combinedSchedules.map(function (item) {\n            return _jsx(AppointmentCard, {\n              schedule: item,\n              propertyId: item.propertyId,\n              onPress: function onPress() {\n                navigation.navigate('View Appointment Detail', {\n                  userId: item.userId,\n                  propertyId: item.propertyId,\n                  scheduleId: item.scheduleId\n                });\n              }\n            });\n          })\n        }) : _jsx(Text, {\n          style: styles.noAvailabilityText,\n          children: \"No bookings for units listed.\"\n        })]\n      })]\n    })\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'white',\n    padding: 16\n  },\n  scrollView: {\n    flex: 1\n  },\n  headerContainer: {\n    marginBottom: 20\n  },\n  header: {\n    fontSize: 25,\n    fontWeight: 'bold',\n    marginTop: 5,\n    textAlign: 'center'\n  },\n  calendarContainer: {\n    borderRadius: 8,\n    marginBottom: 10\n  },\n  calendar: {\n    borderWidth: 0.5,\n    borderColor: 'gray',\n    borderRadius: 8,\n    marginBottom: 10,\n    backgroundColor: 'white'\n  },\n  dateCard: {\n    padding: 8,\n    borderRadius: 8,\n    marginVertical: 10,\n    flexDirection: 'row',\n    alignItems: 'center',\n    borderWidth: 0.1\n  },\n  dateText: {\n    fontSize: 25,\n    fontWeight: 'bold',\n    marginLeft: 10,\n    textAlign: 'center',\n    alignItems: 'center'\n  },\n  sectionHeader: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    marginBottom: 10\n  },\n  noAvailabilityText: {\n    fontSize: 16,\n    textAlign: 'center',\n    marginTop: 10\n  },\n  bookingContainer: {\n    marginTop: 10,\n    backgroundColor: 'white',\n    borderRadius: 8,\n    padding: 16,\n    borderWidth: 0.2,\n    borderColor: 'gray',\n    marginBottom: 10\n  },\n  modalContainer: {\n    flex: 1,\n    justifyContent: 'flex-end',\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    paddingBottom: 20\n  },\n  picker: {\n    backgroundColor: 'white'\n  },\n  okButtonContainer: {\n    backgroundColor: 'white'\n  },\n  propertyTypePickerButton: {\n    borderWidth: 1,\n    borderRadius: 5,\n    paddingHorizontal: 10,\n    borderColor: 'gray',\n    fontSize: 14,\n    padding: 8,\n    width: '40%',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center'\n  },\n  propertyTypePickerText: {\n    fontSize: 14\n  },\n  sectionHeaderContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginBottom: 10\n  }\n});\nvar calendarTheme = {\n  backgroundColor: '#ffffff',\n  calendarBackground: '#ffffff',\n  textSectionTitleColor: '#b6c1cd',\n  selectedDayBackgroundColor: '#00adf5',\n  selectedDayTextColor: '#ffffff',\n  todayTextColor: '#00adf5',\n  dayTextColor: '#2d4150',\n  textDisabledColor: '#d9e1e8'\n};\nexport default Appointments;","map":{"version":3,"names":["React","useState","useEffect","useContext","View","Text","StyleSheet","ScrollView","TouchableOpacity","Alert","FlatList","Modal","Button","Calendar","Ionicons","MaterialCommunityIcons","Icon","useNavigation","AuthContext","DateTimePickerModal","Picker","createSchedule","getScheduleByDateAndPropertyId","getScheduleBySellerId","getScheduleByUserId","removeSchedule","updateSchedule","AppointmentCard","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Appointments","_ref","route","navigation","_useContext","user","_useState","_useState2","_slicedToArray","selectedTime","setSelectedTime","_useState3","_useState4","selectedSchedule","setSelectedSchedule","_useState5","_useState6","startTime","setStartTime","_useState7","_useState8","endTime","setEndTime","userId","userType","_useState9","Date","_useState10","selectedDate","setSelectedDate","_useState11","_useState12","availability","setAvailability","_useState13","_useState14","isToBeUpdated","setIsToBeUpdated","_useState15","_useState16","viewingAvailabilityId","setViewingAvailabilityId","_useState17","_useState18","scheduleId","setScheduleId","_useState19","_useState20","firstLoad","setFirstLoad","_useState21","_useState22","timeSlots","setTimeSlots","_useState23","_useState24","takenTimeSlots","setTakenTimeSlots","_useState25","_useState26","currentDate","setCurrentDate","_useState27","_useState28","refreshFlatList","setRefreshFlatList","_useState29","_useState30","userSlots","setUserSlots","_useState31","_useState32","sellerSlots","setSellerSlots","_useState33","_useState34","userBuySchedules","setUserBuySchedules","_useState35","_useState36","sellerSellSchedules","setSellerSellSchedules","_useState37","_useState38","selectedTimeRange","setSelectedTimeRange","_useState39","_useState40","selectedTextDays","setSelectedTextDays","_useState41","_useState42","dayPickerVisible","setDayPickerVisible","_useState43","_useState44","filteredBuyerSchedules","setFilteredBuyerSchedules","_useState45","_useState46","filteredSellerSchedules","setFilteredSellerSchedules","dayChoices","label","value","fetchScheduleByUser","fetchScheduleBySeller","generateTimeSlots","console","log","combinedSchedules","concat","_toConsumableArray","sort","a","b","dateA","meetupDate","dateB","timeA","meetupTime","timeB","_ref2","_asyncToGenerator","_yield$getScheduleByU","success","data","message","selectedTimeRangeAsNumber","parseInt","daysLater","setHours","setDate","getDate","filteredSchedules","filter","schedule","error","apply","arguments","_ref3","_yield$getScheduleByS","fetchScheduleData","_ref4","_yield$getScheduleByD","propertyListingId","some","item","convertToDateTime","timeString","_timeString$split","split","_timeString$split2","hours","minutes","seconds","formattedDate","setMinutes","setSeconds","handleTimeSlotSelect","time","selectedDateTime","_time$split","_time$split2","timeWithoutAmPm","period","_timeWithoutAmPm$spli","map","Number","_timeWithoutAmPm$spli2","adjustedHours","prevTimeSlots","slot","_objectSpread","userBooked","convertTimeTo12HourFormat","_time$split3","_time$split4","formattedHours","userBookedFlag","startHour","getHours","endHour","_loop","hour","i","ampm","isTimeSlotTaken","takenSlot","userBookedSlot","find","isSlotDisabled","push","id","toString","handleDayPress","day","dateString","formatDate","options","month","year","toLocaleDateString","undefined","getMarkedDates","markedDates","seller","key","color","buyer","selected","selectedDotColor","forEach","userSlot","date","dots","style","styles","container","children","scrollView","headerContainer","header","calendarContainer","onDayPress","onMonthChange","minDate","markingType","calendar","theme","calendarTheme","dateCard","name","size","dateText","bookingContainer","sectionHeader","length","propertyId","onPress","navigate","noAvailabilityText","sectionHeaderContainer","propertyTypePickerButton","propertyTypePickerText","transparent","animationType","visible","onRequestClose","modalContainer","selectedValue","onValueChange","selectedLabel","picker","type","index","Item","okButtonContainer","title","create","flex","backgroundColor","padding","marginBottom","fontSize","fontWeight","marginTop","textAlign","borderRadius","borderWidth","borderColor","marginVertical","flexDirection","alignItems","marginLeft","justifyContent","paddingBottom","paddingHorizontal","width","calendarBackground","textSectionTitleColor","selectedDayBackgroundColor","selectedDayTextColor","todayTextColor","dayTextColor","textDisabledColor"],"sources":["/Users/kathleen/Documents/IS4103Capstone/PropertyGo/frontend/mobile/screens/sideNavigatorBar/Appointment/Appointments.js"],"sourcesContent":["\nimport React, { useState, useEffect, useContext } from 'react';\nimport {\n    View,\n    Text,\n    StyleSheet,\n    ScrollView,\n    TouchableOpacity,\n    Alert,\n    FlatList,\n    Modal,\n    Button,\n} from 'react-native';\nimport { Calendar } from 'react-native-calendars';\nimport { Ionicons, MaterialCommunityIcons } from '@expo/vector-icons';\nimport Icon from 'react-native-vector-icons/FontAwesome';\nimport { useNavigation } from '@react-navigation/native';\nimport { AuthContext } from '../../../AuthContext';\nimport DateTimePickerModal from 'react-native-modal-datetime-picker';\nimport { Picker } from '@react-native-picker/picker';\nimport {\n    createSchedule,\n    getScheduleByDateAndPropertyId,\n    getScheduleBySellerId,\n    getScheduleByUserId,\n    removeSchedule,\n    updateSchedule,\n} from '../../../utils/scheduleApi';\nimport AppointmentCard from '../../schedule/AppointmentCard';\n\nconst Appointments = ({route}) => {\n    const navigation = useNavigation();\n    const {user} = useContext(AuthContext);\n    const [selectedTime, setSelectedTime] = useState(null);\n    const [selectedSchedule, setSelectedSchedule] = useState(null);\n    const [startTime, setStartTime] = useState(null);\n    const [endTime, setEndTime] = useState(null);\n    const userId = user.user.userId;\n    const userType = user.user.userType;\n    // const sellerUserId = userDetails.userId;\n    // Define selected date state\n    const [selectedDate, setSelectedDate] = useState(new Date());\n    const [availability, setAvailability] = useState([]);\n    const [isToBeUpdated, setIsToBeUpdated] = useState(false);\n    const [viewingAvailabilityId, setViewingAvailabilityId] = useState(null);\n    const [scheduleId, setScheduleId] = useState(null);\n    const [firstLoad, setFirstLoad] = useState(true);\n    const [timeSlots, setTimeSlots] = useState([]);\n    const [takenTimeSlots, setTakenTimeSlots] = useState([]);\n    const [currentDate, setCurrentDate] = useState(new Date());\n    const [refreshFlatList, setRefreshFlatList] = useState(false);\n    const [userSlots, setUserSlots] = useState([]);\n    const [sellerSlots, setSellerSlots] = useState([]);\n    const [userBuySchedules, setUserBuySchedules] = useState([]); // Schedules for \"To Buy\"\n    const [sellerSellSchedules, setSellerSellSchedules] = useState([]); // Schedules for \"To Sell\"\n    const [selectedTimeRange, setSelectedTimeRange] = useState('1'); // Default: Next 7 days\n    const [selectedTextDays, setSelectedTextDays] = useState('Tomorrow');\n    const [dayPickerVisible, setDayPickerVisible] = useState(false);\n    const [filteredBuyerSchedules, setFilteredBuyerSchedules] = useState([]);\n    const [filteredSellerSchedules, setFilteredSellerSchedules] = useState([]);\n\n    const dayChoices = [\n        { label: 'Tomorrow', value: '1' },\n        { label: 'Next 3 Days', value: '3' },\n        { label: 'Next 7 Days', value: '7' },\n        { label: 'Next 15 Days', value: '15' },\n        { label: 'Next 30 Days', value: '30' },\n    ]\n\n    useEffect(() => {\n        // fetchViewingAvailabilityByDateAndPropertyId();\n        // fetchViewingAvailabilityByPropertyId();\n        // fetchScheduleData();\n        fetchScheduleByUser();\n        fetchScheduleBySeller();\n    }, [selectedDate]);\n\n    useEffect(() => {\n        fetchScheduleByUser();\n        fetchScheduleBySeller();\n    }, [selectedTimeRange]);\n\n    useEffect(() => {\n        if (firstLoad) {\n            setTimeSlots(generateTimeSlots());\n            console.log(\"timeslots: \", generateTimeSlots())\n        }\n    }, []);\n\n    const combinedSchedules = [...filteredBuyerSchedules, ...filteredSellerSchedules];\n    combinedSchedules.sort((a, b) => {\n        // Sort by meetup date first\n        const dateA = new Date(a.meetupDate);\n        const dateB = new Date(b.meetupDate);\n        if (dateA < dateB) return -1;\n        if (dateA > dateB) return 1;\n\n        // If meetup dates are the same, sort by time\n        const timeA = a.meetupTime;\n        const timeB = b.meetupTime;\n        if (timeA < timeB) return -1;\n        if (timeA > timeB) return 1;\n\n        return 0;\n    });\n\n    const fetchScheduleByUser = async () => {\n        const {success, data, message} = await getScheduleByUserId(\n            userId\n        );\n\n        if (success) {\n            setUserSlots(data);\n            const selectedTimeRangeAsNumber = parseInt(selectedTimeRange);\n            const currentDate = new Date();\n\n            // Calculate the date 7 days from now\n            const daysLater = new Date(currentDate);\n            daysLater.setHours(0, 0, 0, 0);\n            daysLater.setDate(currentDate.getDate() + selectedTimeRangeAsNumber);\n\n            const filteredSchedules = data.filter(schedule => {\n                const meetupDate = new Date(schedule.meetupDate);\n                meetupDate.setHours(0, 0, 0, 0); // Set time to midnight for comparison\n                return meetupDate >= currentDate && meetupDate <= daysLater;\n            });\n\n            setFilteredBuyerSchedules(filteredSchedules);\n        }\n        else {\n            setUserSlots([]);\n            console.error('Error fetching schedule data for user:', message);\n        }\n    };\n\n    const fetchScheduleBySeller = async () => {\n        const {success, data, message} = await getScheduleBySellerId(\n            userId\n        );\n\n        if (success) {\n            setSellerSlots(data);\n            const selectedTimeRangeAsNumber = parseInt(selectedTimeRange);\n            const currentDate = new Date();\n\n            // Calculate the date 7 days from now\n            const daysLater = new Date(currentDate);\n            daysLater.setHours(0, 0, 0, 0);\n            daysLater.setDate(currentDate.getDate() + selectedTimeRangeAsNumber);\n            const filteredSchedules = data.filter(schedule => {\n                const meetupDate = new Date(schedule.meetupDate);\n                meetupDate.setHours(0, 0, 0, 0); // Set time to midnight for comparison\n                return meetupDate >= currentDate && meetupDate <= daysLater;\n            });\n\n            setFilteredSellerSchedules(filteredSchedules);\n        } else {\n            setSellerSlots([]);\n            console.error('Error fetching schedule data for user:', message);\n        }\n    };\n\n    const fetchScheduleData = async () => {\n        const {success, data, message} = await getScheduleByDateAndPropertyId(\n            selectedDate,\n            propertyListingId\n        );\n\n        if (success) {\n            setTakenTimeSlots(data);\n            setIsToBeUpdated(data.some(item => item.userId === userId));\n        } else {\n            console.error('Error fetching schedule data:', message);\n            setTakenTimeSlots([]);\n        }\n    };\n\n    const convertToDateTime = (timeString) => {\n        const [hours, minutes, seconds] = timeString.split(':');\n        const formattedDate = new Date();\n        formattedDate.setHours(parseInt(hours, 10));\n        formattedDate.setMinutes(parseInt(minutes, 10));\n        formattedDate.setSeconds(parseInt(seconds, 10));\n        return formattedDate;\n    };\n\n    // Function to handle time slot selection\n    const handleTimeSlotSelect = (time, scheduleId) => {\n        // Combine the selected date with the parsed time to create a DateTime object\n        const selectedDateTime = new Date(selectedDate);\n        const [timeWithoutAmPm, period] = time.split(' '); // Split time and AM/PM\n        const [hours, minutes] = timeWithoutAmPm.split(':').map(Number);\n\n        // Calculate adjusted hours for PM\n        let adjustedHours = hours;\n        if (period === 'PM' && hours !== 12) {\n            adjustedHours += 12;\n        } else if (period === 'AM' && hours === 12) {\n            adjustedHours = 0; // Midnight (12:00 AM) is represented as 0 in 24-hour format\n        }\n\n        selectedDateTime.setHours(adjustedHours);\n        selectedDateTime.setMinutes(minutes);\n\n        setSelectedTime(time);\n        setSelectedSchedule(selectedDateTime);\n        setScheduleId(scheduleId);\n\n        // Update the timeSlots array with the new userBooked value for the selected time slot\n        setTimeSlots((prevTimeSlots) =>\n            prevTimeSlots.map((slot) =>\n                slot.time === time ? {...slot, userBooked: true} : slot\n            )\n        );\n    };\n\n    function convertTimeTo12HourFormat(time) {\n        const [hours, minutes, seconds] = time.split(':');\n        let period = 'AM';\n        let formattedHours = parseInt(hours);\n\n        if (formattedHours >= 12) {\n            period = 'PM';\n            if (formattedHours > 12) {\n                formattedHours -= 12;\n            }\n        }\n\n        return `${formattedHours}:${minutes} ${period}`;\n    }\n\n    // Generate hourly time slots between start and end times\n    const generateTimeSlots = () => {\n        console.log('generateTimeSlots() selectedDate:', selectedDate)\n        console.log('generateTimeSlots() startTime: ', startTime)\n        console.log('generateTimeSlots() endTime: ', endTime)\n        const timeSlots = [];\n        let userBookedFlag = false;\n        if (startTime && endTime) {\n            const startHour = startTime.getHours();\n            const endHour = endTime.getHours();\n            for (let i = startHour; i <= endHour; i++) {\n                const hour = i % 12 || 12; // Convert to 12-hour format\n                const ampm = i < 12 ? 'AM' : 'PM';\n                const time = `${hour}:00 ${ampm}`;\n                const isTimeSlotTaken = takenTimeSlots.some(\n                    (takenSlot) => convertTimeTo12HourFormat(takenSlot.meetupTime) === time\n                );\n                const userBookedSlot = takenTimeSlots.find(\n                    (takenSlot) =>\n                        takenSlot.userId === userId &&\n                        convertTimeTo12HourFormat(takenSlot.meetupTime) === time\n                );\n\n                const scheduleId = userBookedSlot ? userBookedSlot.scheduleId : null;\n\n                const isSlotDisabled = !userBookedSlot && isTimeSlotTaken;\n                timeSlots.push({\n                    id: i.toString(),\n                    time,\n                    isTimeSlotTaken,\n                    userBooked: !!userBookedSlot,\n                    isSlotDisabled,\n                    scheduleId, // Store the scheduleId if the slot is taken by a user\n                });\n\n                if (!!userBookedSlot) {\n                    userBookedFlag = true;\n                }\n            }\n            // setUpdateSchedule(userBookedFlag);\n        }\n        console.log('timeSlots: ', timeSlots, \"for: \", selectedDate)\n        if (firstLoad) {\n            // Display a message for the initial load\n            return [\n                {\n                    id: 'initial-load',\n                    time: 'Select a time slot',\n                    isSlotDisabled: true,\n                    userBooked: false,\n                },\n            ];\n        }\n\n        return timeSlots;\n    };\n\n\n    // Function to handle day press in the calendar\n    const handleDayPress = (day) => {\n        setFirstLoad(false);\n        setSelectedDate(day.dateString);\n        setSelectedTime(null); // Clear selected time when a new date is chosen\n        setStartTime(null);\n        setEndTime(null);\n        setCurrentDate(new Date(day.dateString)); // Update the current date\n\n        // Fetch and filter schedules for \"To Buy\"\n        const userBuySchedules = userSlots.filter((schedule) => {\n            // Filter schedules for \"To Buy\" based on date\n            return schedule.meetupDate === day.dateString;\n        });\n        setUserBuySchedules(userBuySchedules);\n\n        // Fetch and filter schedules for \"To Sell\"\n        const sellerSellSchedules = sellerSlots.filter((schedule) => {\n            // Filter schedules for \"To Sell\" based on date\n            return schedule.meetupDate === day.dateString;\n        });\n        setSellerSellSchedules(sellerSellSchedules);\n    };\n\n    const formatDate = (dateString) => {\n        const options = {day: '2-digit', month: 'long', year: 'numeric'};\n        return new Date(dateString).toLocaleDateString(undefined, options);\n    };\n\n    const getMarkedDates = () => {\n        const markedDates = {};\n        const seller = { key: 'seller', color: 'red' };\n        const buyer = { key: 'buyer', color: 'green' };\n\n        console.log('selectedDate: ', selectedDate);\n        // if (userSlots.length === 0 || sellerSlots.length === 0) {\n        markedDates[selectedDate] = { selected: true, selectedDotColor: 'blue' };\n        // }\n\n        // Loop through the data and mark the dates\n        userSlots.forEach((userSlot) => {\n            const date = userSlot.meetupDate; // Get the date from the fetched data\n\n            // if (!markedDates[date]) {\n            markedDates[date] = { dots: [] };\n            // }\n            markedDates[date].dots.push(buyer);\n\n            if (date === selectedDate) {\n                markedDates[date].selected = true;\n                markedDates[date].selectedDotColor = 'blue';\n            }\n        });\n\n        sellerSlots.forEach((availability) => {\n            const date = availability.meetupDate; // Get the date from the fetched data\n            if (!markedDates[date]) {\n                markedDates[date] = { dots: [] }; // Create a new entry with an empty dots array\n            } else if (!markedDates[date].dots) {\n                markedDates[date].dots = []; // If dots array doesn't exist, create it\n            }\n\n            markedDates[date].dots.push(seller);\n\n            if (date === selectedDate) {\n                markedDates[date].selected = true;\n                markedDates[date].selectedDotColor = 'blue';\n            }\n        });\n\n        return markedDates;\n    };\n\n\n    return (\n        <View style={styles.container}>\n            <ScrollView style={styles.scrollView}>\n                <View style={styles.headerContainer}>\n                    <Text style={styles.header}>Appointments</Text>\n                </View>\n\n                <View style={styles.calendarContainer}>\n                    <Calendar\n                        onDayPress={handleDayPress}\n                        onMonthChange={handleDayPress}\n                        minDate={new Date()}\n                        markingType={'multi-dot'}\n                        style={styles.calendar}\n                        theme={calendarTheme}\n                        markedDates={getMarkedDates()}\n                    />\n                </View>\n                \n                <View style={styles.dateCard}>\n                    <Ionicons name=\"calendar\" size={28} color=\"#00adf5\" />\n                    <Text style={styles.dateText}>{formatDate(selectedDate)}</Text>\n                </View>\n\n                <View style={styles.bookingContainer}>\n                    <Text style={styles.sectionHeader}>\n                        <MaterialCommunityIcons\n                            name=\"telescope\"\n                            size={28}\n                            color=\"#00adf5\"\n                        />{' '}\n                        To Buy - Upcoming To View\n                    </Text>\n                    {userBuySchedules && userBuySchedules.length > 0 ? (\n                        <>\n                            {userBuySchedules.map((item) => (\n                                <AppointmentCard schedule={item} propertyId={item.propertyId} onPress={() => {\n                                    navigation.navigate('View Appointment Detail', { userId: item.userId, propertyId: item.propertyId, scheduleId: item.scheduleId});\n                                }} />\n                            ))}\n                        </>\n                    ) : (\n                        <Text style={styles.noAvailabilityText}>No bookings found.</Text>\n                    )}\n                </View>\n\n                <View style={styles.bookingContainer}>\n                    <Text style={styles.sectionHeader}>\n                        <MaterialCommunityIcons\n                            name=\"table-eye\"\n                            size={28}\n                            color=\"#00adf5\"\n                        />{' '}\n                        To Sell - Buyers To View Unit\n                    </Text>\n                    {sellerSellSchedules && sellerSellSchedules.length > 0 ? (\n                        <>\n                            {sellerSellSchedules.map((item) => (\n                                <AppointmentCard schedule={item} propertyId={item.propertyId} onPress={() => {\n                                    navigation.navigate('View Appointment Detail', { userId: item.userId, propertyId: item.propertyId, scheduleId: item.scheduleId});\n                                }} />\n                            ))}\n                        </>\n                    ) : (\n                        <Text style={styles.noAvailabilityText}>\n                            No bookings for units listed.\n                        </Text>\n                    )}\n                </View>\n\n                <View style={styles.bookingContainer}>\n                    <View style={styles.sectionHeaderContainer}>\n                        <Text style={styles.sectionHeader}>\n                            <MaterialCommunityIcons\n                                name=\"calendar-search\"\n                                size={28}\n                                color=\"#00adf5\"\n                            />{' '}\n                            Upcoming Days\n                        </Text>\n                        {/* Picker */}\n                        <TouchableOpacity\n                            style={styles.propertyTypePickerButton}\n                            onPress={() => setDayPickerVisible(true)}\n                        >\n                            <Text style={styles.propertyTypePickerText}>\n                                {selectedTextDays}\n                            </Text>\n                            <Icon name=\"caret-down\" size={20} color=\"black\" />\n                        </TouchableOpacity>\n                        {/* Picker */}\n                    </View>\n\n                    <Modal\n                        transparent={true}\n                        animationType=\"slide\"\n                        visible={dayPickerVisible}\n                        onRequestClose={() => setDayPickerVisible(false)}\n                    >\n                        <View style={styles.modalContainer}>\n                            <Picker\n                                selectedValue={selectedTimeRange}\n                                onValueChange={(value) => {\n                                    setSelectedTimeRange(value);\n                                    // Find the corresponding label and set it as selectedTextDays\n                                    const selectedLabel = dayChoices.find((item) => item.value === value);\n                                    if (selectedLabel) {\n                                        setSelectedTextDays(selectedLabel.label);\n                                    }\n                                    console.log('selectedTimeRange: ', selectedTimeRange, \"selectedTextDays: \", selectedTextDays);\n                                }}\n                                style={styles.picker}\n                            >\n                                {dayChoices.map((type, index) => (\n                                    <Picker.Item\n                                        key={index}\n                                        label={type.label}\n                                        value={type.value}\n                                    />\n                                ))}\n                            </Picker>\n\n                            <View style={styles.okButtonContainer}>\n                                <Button\n                                    title=\"OK\"\n                                    onPress={() => setDayPickerVisible(false)}\n                                />\n                            </View>\n                        </View>\n                    </Modal>\n                    {/* Picker */}\n                    {combinedSchedules.length > 0 ? (\n                        <>\n                            {combinedSchedules.map((item) => (\n                                <AppointmentCard schedule={item} propertyId={item.propertyId} onPress={() => {\n                                    navigation.navigate('View Appointment Detail', { userId: item.userId, propertyId: item.propertyId, scheduleId: item.scheduleId });\n                                }} />\n                            ))}\n                        </>\n                    ) : (\n                        <Text style={styles.noAvailabilityText}>\n                            No bookings for units listed.\n                        </Text>\n                    )}\n                </View>\n            </ScrollView>\n        </View>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: 'white',\n        padding: 16,\n    },\n    scrollView: {\n        flex: 1,\n    },\n    headerContainer: {\n        marginBottom: 20,\n    },\n    header: {\n        fontSize: 25,\n        fontWeight: 'bold',\n        marginTop: 5,\n        textAlign: 'center',\n    },\n    calendarContainer: {\n        borderRadius: 8,\n        marginBottom: 10,\n    },\n    calendar: {\n        borderWidth: 0.5,\n        borderColor: 'gray',\n        borderRadius: 8,\n        marginBottom: 10,\n        backgroundColor: 'white',\n    },\n    dateCard: {\n        // backgroundColor: '#f5f5f5',\n        padding: 8,\n        borderRadius: 8,\n        marginVertical: 10,\n        flexDirection: 'row',\n        alignItems: 'center',\n        borderWidth: 0.1,\n    },\n    dateText: {\n        fontSize: 25,\n        fontWeight: 'bold',\n        marginLeft: 10,\n        textAlign: 'center',\n        alignItems: 'center',\n    },\n    sectionHeader: {\n        fontSize: 20,\n        fontWeight: 'bold',\n        marginBottom: 10,\n    },\n    noAvailabilityText: {\n        fontSize: 16,\n        textAlign: 'center',\n        marginTop: 10,\n    },\n    bookingContainer: {\n        marginTop: 10,\n        backgroundColor: 'white',\n        borderRadius: 8,\n        padding: 16,\n        borderWidth: 0.2,\n        borderColor: 'gray',\n        marginBottom: 10,\n    },\n    modalContainer: {\n        flex: 1,\n        justifyContent: 'flex-end',\n        backgroundColor: 'rgba(0, 0, 0, 0.5)',\n        paddingBottom: 20, // Add padding to make the button visible\n    },\n    picker: {\n        backgroundColor: 'white',\n    },\n    okButtonContainer: {\n        backgroundColor: 'white',\n    },\n    propertyTypePickerButton: {\n        borderWidth: 1,\n        borderRadius: 5,\n        paddingHorizontal: 10,\n        borderColor: 'gray',\n        fontSize: 14,\n        padding: 8,\n        width: '40%',\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n    },\n    propertyTypePickerText: {\n        fontSize: 14,\n    },\n    sectionHeaderContainer: {\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        marginBottom: 10,\n    },\n\n});\n\nconst calendarTheme = {\n    backgroundColor: '#ffffff',\n    calendarBackground: '#ffffff',\n    textSectionTitleColor: '#b6c1cd',\n    selectedDayBackgroundColor: '#00adf5',\n    selectedDayTextColor: '#ffffff',\n    todayTextColor: '#00adf5',\n    dayTextColor: '#2d4150',\n    textDisabledColor: '#d9e1e8',\n};\n\nexport default Appointments;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}