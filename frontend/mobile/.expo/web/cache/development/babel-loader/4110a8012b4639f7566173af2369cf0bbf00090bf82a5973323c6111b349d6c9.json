{
  "ast": null,
  "code": "import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar BASE_URL = 'http://localhost:3000';\nvar BASE_URL_WAYNE = 'http://10.0.0.17:3000';\nvar USER_ENDPOINT = 'user';\nexport var loginUser = function () {\n  var _ref = _asyncToGenerator(function* (userName, password) {\n    try {\n      var response = yield fetch(`${BASE_URL}/${USER_ENDPOINT}/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userName: userName,\n          password: password\n        })\n      });\n      if (response.ok) {\n        var data = yield response.json();\n        return {\n          success: true,\n          data: data\n        };\n      } else {\n        var errorData = yield response.json();\n        return {\n          success: false,\n          message: errorData.message\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  });\n  return function loginUser(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var signUpUser = function () {\n  var _ref2 = _asyncToGenerator(function* (userData) {\n    try {\n      var response = yield fetch(`${BASE_URL}/${USER_ENDPOINT}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n      });\n      var data = yield response.json();\n      if (response.ok) {\n        return {\n          success: true,\n          data: data\n        };\n      } else {\n        return {\n          success: false,\n          error: data.error\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  });\n  return function signUpUser(_x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var updateUserProfile = function () {\n  var _ref3 = _asyncToGenerator(function* (userId, formData) {\n    try {\n      var response = yield fetch(`${BASE_URL}/${USER_ENDPOINT}/${userId}`, {\n        method: 'PUT',\n        body: formData,\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      if (response.ok) {\n        var data = yield response.json();\n        return {\n          success: true,\n          data: data\n        };\n      } else {\n        var errorData = yield response.json();\n        console.error('Update Profile Error:', errorData);\n        return {\n          success: false,\n          message: errorData.message\n        };\n      }\n    } catch (error) {\n      console.error('Update Profile Error:', error);\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  });\n  return function updateUserProfile(_x4, _x5) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var updateUserProfilePicture = function () {\n  var _ref4 = _asyncToGenerator(function* (userId, imageUri) {\n    try {\n      var formData = new FormData();\n      formData.append('profileImage', {\n        uri: imageUri,\n        type: 'image/jpeg',\n        name: 'profile.jpg'\n      });\n      var responseUpload = yield fetch(`${BASE_URL}/${USER_ENDPOINT}/${userId}/profilePicture`, {\n        method: 'POST',\n        body: formData,\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      if (responseUpload.ok) {\n        var data = yield responseUpload.json();\n        return {\n          success: true,\n          data: data\n        };\n      } else {\n        var errorData = yield responseUpload.json();\n        console.error('Update Profile Picture Error:', errorData);\n        return {\n          success: false,\n          message: errorData.message\n        };\n      }\n    } catch (error) {\n      console.error('Update Profile Picture Error:', error);\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  });\n  return function updateUserProfilePicture(_x6, _x7) {\n    return _ref4.apply(this, arguments);\n  };\n}();",
  "map": {
    "version": 3,
    "names": [
      "BASE_URL",
      "BASE_URL_WAYNE",
      "USER_ENDPOINT",
      "loginUser",
      "_ref",
      "_asyncToGenerator",
      "userName",
      "password",
      "response",
      "fetch",
      "method",
      "headers",
      "body",
      "JSON",
      "stringify",
      "ok",
      "data",
      "json",
      "success",
      "errorData",
      "message",
      "error",
      "_x",
      "_x2",
      "apply",
      "arguments",
      "signUpUser",
      "_ref2",
      "userData",
      "_x3",
      "updateUserProfile",
      "_ref3",
      "userId",
      "formData",
      "console",
      "_x4",
      "_x5",
      "updateUserProfilePicture",
      "_ref4",
      "imageUri",
      "FormData",
      "append",
      "uri",
      "type",
      "name",
      "responseUpload",
      "_x6",
      "_x7"
    ],
    "sources": [
      "/Users/wjahoward/Desktop/NUS/Y3S1/IS4103/PropertyGo/frontend/mobile/utils/api.js"
    ],
    "sourcesContent": [
      "import { Platform } from 'react-native';\n\nconst BASE_URL = 'http://localhost:3000';\nconst BASE_URL_WAYNE = 'http://10.0.0.17:3000';\nconst USER_ENDPOINT = 'user';\n\nexport const loginUser = async (userName, password) => {\n  try {\n    const response = await fetch(`${BASE_URL}/${USER_ENDPOINT}/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ userName, password }),\n    });\n\n    if (response.ok) {\n      const data = await response.json();\n      return { success: true, data };\n    } else {\n      const errorData = await response.json();\n      return { success: false, message: errorData.message };\n    }\n  } catch (error) {\n    return { success: false, message: error.message };\n  }\n};\n\nexport const signUpUser = async (userData) => {\n  try {\n    const response = await fetch(`${BASE_URL}/${USER_ENDPOINT}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(userData),\n    });\n\n    const data = await response.json();\n\n    if (response.ok) {\n      return { success: true, data };\n    } else {\n      return { success: false, error: data.error };\n    }\n  } catch (error) {\n    return { success: false, error: error.message };\n  }\n};\n\nexport const updateUserProfile = async (userId, formData) => {\n  try {\n    const response = await fetch(`${BASE_URL}/${USER_ENDPOINT}/${userId}`, {\n      method: 'PUT',\n      body: formData,\n      headers: {\n        'Content-Type': 'multipart/form-data', // Explicitly set the Content-Type\n      },\n    });\n\n    if (response.ok) {\n      const data = await response.json();\n      // console.log('Update Profile Response:', data); // Add this log statement\n      return { success: true, data };\n    } else {\n      const errorData = await response.json();\n      console.error('Update Profile Error:', errorData); // Add this log statement\n      return { success: false, message: errorData.message };\n    }\n  } catch (error) {\n    console.error('Update Profile Error:', error); // Add this log statement\n    return { success: false, message: error.message };\n  }\n};\n\nexport const updateUserProfilePicture = async (userId, imageUri) => {\n  try {\n    const formData = new FormData();\n    formData.append('profileImage', {\n      uri: imageUri,\n      type: 'image/jpeg',\n      name: 'profile.jpg',\n    });\n\n    const responseUpload = await fetch(`${BASE_URL}/${USER_ENDPOINT}/${userId}/profilePicture`, {\n      method: 'POST',\n      body: formData,\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n\n    if (responseUpload.ok) {\n      const data = await responseUpload.json();\n      return { success: true, data };\n    } else {\n      const errorData = await responseUpload.json();\n      console.error('Update Profile Picture Error:', errorData);\n      return { success: false, message: errorData.message };\n    }\n  } catch (error) {\n    console.error('Update Profile Picture Error:', error);\n    return { success: false, message: error.message };\n  }\n};\n\n\n\n\n\n"
    ],
    "mappings": "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"
  },
  "metadata": {},
  "sourceType": "module",
  "externalDependencies": []
}