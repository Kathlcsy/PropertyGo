{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nexport var getAreaAndRegion = function () {\n  var _ref = _asyncToGenerator(function* (postalCode) {\n    console.log(\"area and region: \", postalCode);\n    var firstTwoDigits = postalCode.substring(0, 2);\n    var postalCodeLookup = [{\n      range: [1, 6],\n      area: 'Raffles Place, Cecil, Marina, People’s Park',\n      region: 'Central'\n    }, {\n      range: [7, 8],\n      area: 'Anson, Tanjong Pagar',\n      region: 'Central'\n    }, {\n      range: [14, 16],\n      area: 'Queenstown, Tiong Bahru',\n      region: 'Central'\n    }, {\n      range: [9, 10],\n      area: 'Telok Blangah, Harbourfront',\n      region: 'Central'\n    }, {\n      range: [11, 13],\n      area: 'Pasir Panjang, Hong Leong Garden, Clementi New Town',\n      region: 'Central'\n    }, {\n      range: [17],\n      area: 'High Street, Beach Road (part)',\n      region: 'Central'\n    }, {\n      range: [18, 19],\n      area: 'Middle Road, Golden Mile',\n      region: 'Central'\n    }, {\n      range: [20, 21],\n      area: 'Little India',\n      region: 'Central'\n    }, {\n      range: [22, 23],\n      area: 'Orchard, Cairnhill, River Valley',\n      region: 'Central'\n    }, {\n      range: [24, 27],\n      area: 'Ardmore, Bukit Timah, Holland Road, Tanglin',\n      region: 'Central'\n    }, {\n      range: [28, 30],\n      area: 'Watten Estate, Novena, Thomson',\n      region: 'Central'\n    }, {\n      range: [31, 33],\n      area: 'Balestier, Toa Payoh, Serangoon',\n      region: 'Central'\n    }, {\n      range: [34, 37],\n      area: 'Macpherson, Braddell',\n      region: 'Central'\n    }, {\n      range: [38, 41],\n      area: 'Geylang, Eunos',\n      region: 'Central'\n    }, {\n      range: [42, 45],\n      area: 'Katong, Joo Chiat, Amber Road',\n      region: 'Central'\n    }, {\n      range: [46, 48],\n      area: 'Bedok, Upper East Coast, Eastwood, Kew Drive',\n      region: 'Central'\n    }, {\n      range: [49, 50, 81],\n      area: 'Loyang, Changi',\n      region: 'East'\n    }, {\n      range: [51, 52],\n      area: 'Tampines, Pasir Ris',\n      region: 'East'\n    }, {\n      range: [53, 55, 82],\n      area: 'Serangoon Garden, Hougang, Punggol',\n      region: 'North-East'\n    }, {\n      range: [56, 57],\n      area: 'Bishan, Ang Mo Kio',\n      region: 'North-East'\n    }, {\n      range: [58, 59],\n      area: 'Upper Bukit Timah, Clementi Park, Ulu Pandan',\n      region: 'West'\n    }, {\n      range: [60, 64],\n      area: 'Jurong',\n      region: 'West'\n    }, {\n      range: [65, 68],\n      area: 'Hillview, Dairy Farm, Bukit Panjang, Choa Chu Kang',\n      region: 'West'\n    }, {\n      range: [69, 71],\n      area: 'Lim Chu Kang, Tengah',\n      region: 'West'\n    }, {\n      range: [72, 73],\n      area: 'Kranji, Woodgrove',\n      region: 'North'\n    }, {\n      range: [77, 78],\n      area: 'Upper Thomson, Springleaf',\n      region: 'North'\n    }, {\n      range: [75, 76],\n      area: 'Yishun, Sembawang',\n      region: 'North'\n    }, {\n      range: [79, 80],\n      area: 'Seletar',\n      region: 'North'\n    }];\n    var code = parseInt(firstTwoDigits);\n    console.log(\"code: \", code);\n    var match = postalCodeLookup.find(function (_ref2) {\n      var range = _ref2.range;\n      return code >= range[0] && code <= range[range.length - 1];\n    });\n    if (match) {\n      console.log(\"match: \", match);\n      return {\n        area: match.area,\n        region: match.region\n      };\n    } else {\n      return {\n        area: 'Unknown',\n        region: 'Unknown'\n      };\n    }\n  });\n  return function getAreaAndRegion(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["getAreaAndRegion","_ref","_asyncToGenerator","postalCode","console","log","firstTwoDigits","substring","postalCodeLookup","range","area","region","code","parseInt","match","find","_ref2","length","_x","apply","arguments"],"sources":["/Users/kathleen/Documents/IS4103Capstone/PropertyGo/frontend/mobile/services/GetAreaAndRegion.js"],"sourcesContent":["export const getAreaAndRegion = async (postalCode) => {\n    // Define a lookup table for postal code ranges and their corresponding areas and regions\n    \n    console.log(\"area and region: \",postalCode);\n    const firstTwoDigits = postalCode.substring(0, 2);\n    const postalCodeLookup = [\n      { range: [1, 6], area: 'Raffles Place, Cecil, Marina, People’s Park', region: 'Central' },\n      { range: [7, 8], area: 'Anson, Tanjong Pagar', region: 'Central' },\n      { range: [14, 16], area: 'Queenstown, Tiong Bahru', region: 'Central' },\n      { range: [9, 10], area: 'Telok Blangah, Harbourfront', region: 'Central' },\n      { range: [11, 13], area: 'Pasir Panjang, Hong Leong Garden, Clementi New Town', region: 'Central' },\n      { range: [17], area: 'High Street, Beach Road (part)', region: 'Central' },\n      { range: [18, 19], area: 'Middle Road, Golden Mile', region: 'Central' },\n      { range: [20, 21], area: 'Little India', region: 'Central' },\n      { range: [22, 23], area: 'Orchard, Cairnhill, River Valley', region: 'Central' },\n      { range: [24, 27], area: 'Ardmore, Bukit Timah, Holland Road, Tanglin', region: 'Central' },\n      { range: [28, 30], area: 'Watten Estate, Novena, Thomson', region: 'Central' },\n      { range: [31, 33], area: 'Balestier, Toa Payoh, Serangoon', region: 'Central' },\n      { range: [34, 37], area: 'Macpherson, Braddell', region: 'Central' },\n      { range: [38, 41], area: 'Geylang, Eunos', region: 'Central' },\n      { range: [42, 45], area: 'Katong, Joo Chiat, Amber Road', region: 'Central' },\n      { range: [46, 48], area: 'Bedok, Upper East Coast, Eastwood, Kew Drive', region: 'Central' },\n      { range: [49, 50, 81], area: 'Loyang, Changi', region: 'East' },\n      { range: [51, 52], area: 'Tampines, Pasir Ris', region: 'East' },\n      { range: [53, 55, 82], area: 'Serangoon Garden, Hougang, Punggol', region: 'North-East' },\n      { range: [56, 57], area: 'Bishan, Ang Mo Kio', region: 'North-East' },\n      { range: [58, 59], area: 'Upper Bukit Timah, Clementi Park, Ulu Pandan', region: 'West' },\n      { range: [60, 64], area: 'Jurong', region: 'West' },\n      { range: [65, 68], area: 'Hillview, Dairy Farm, Bukit Panjang, Choa Chu Kang', region: 'West' },\n      { range: [69, 71], area: 'Lim Chu Kang, Tengah', region: 'West' },\n      { range: [72, 73], area: 'Kranji, Woodgrove', region: 'North' },\n      { range: [77, 78], area: 'Upper Thomson, Springleaf', region: 'North' },\n      { range: [75, 76], area: 'Yishun, Sembawang', region: 'North' },\n      { range: [79, 80], area: 'Seletar', region: 'North' },\n    ];\n  \n    // Convert the postal code to a number (assuming postalCode is a string)\n    const code = parseInt(firstTwoDigits);\n  \n    // Find the matching range and return the corresponding area and region\n    console.log(\"code: \",code);\n    const match = postalCodeLookup.find(({ range }) => {\n      return code >= range[0] && code <= range[range.length - 1];\n    });\n  \n    if (match) {\n        console.log(\"match: \",match);\n      return {\n        area: match.area,\n        region: match.region,\n      };\n    } else {\n      return {\n        area: 'Unknown',\n        region: 'Unknown',\n      };\n    }\n  };\n  \n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}